{"version":3,"sources":["matchController.es6"],"names":["MatchController","$filter","$mdDialog","$mdMedia","$q","$rootScope","$scope","AnnotationService","ConfigService","dragulaService","MatchService","NodeService","NotebookService","ProjectService","StudentAssetService","StudentDataService","UtilService","autoScroll","require","choices","buckets","isCorrect","bucketWidth","numChoiceColumns","isHorizontal","componentContent","horizontal","choiceStyle","bucketStyle","sourceBucketId","hasCorrectAnswer","isLatestComponentStateSubmit","sourceBucket","privateNotebookItems","mode","isPromptVisible","isSaveButtonVisible","showSaveButton","isSubmitButtonVisible","showSubmitButton","shouldImportPrivateNotes","getPrivateNotebookItems","$on","event","args","notebookItem","type","addNotebookItemToSourceBucket","isDisabled","workgroupId","hasCorrectChoices","initializeChoices","initializeBuckets","componentState","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","isSubmit","studentHasUsedAllSubmits","isSubmitButtonDisabled","disableComponentIfNecessary","registerDragListeners","getComponentState","deferred","defer","hasDirtyWork","action","matchController","isSubmitDirty","isDirty","createComponentState","then","resolve","promise","$broadcast","nodeId","componentId","choice","createChoiceFromNotebookItem","push","getBucketById","items","maxSubmitCount","submitCounter","dragId","registerStudentDataChangedOnDrop","disableDraggingIfNeeded","drake","find","showVisualIndicatorWhileDragging","supportScrollWhileDragging","dropEvent","e","el","container","source","studentDataChanged","options","moves","handle","sibling","on","className","replace","document","querySelector","margin","pixels","scrollWhenOutside","down","dragging","submit","studentData","componentStateBuckets","bucketIds","getBucketIds","choiceIds","getChoiceIds","componentStateBucket","componentStateBucketId","id","indexOf","currentChoice","currentChoiceId","currentChoiceLocation","bucket","updatedChoice","getChoiceById","splice","choiceId","checkAnswer","processPreviousStudentWork","latestComponentState","getLatestComponentStateByNodeIdAndComponentId","serverSaveTime","clientSaveTime","convertToClientTimestamp","setIsSubmitDirty","setSubmittedMessage","latestSubmitComponentState","getLatestSubmitComponentState","showFeedbackOnUnchangedChoices","setSavedMessage","choicesThatChangedSinceLastSubmit","getChoicesThatChangedSinceLastSubmit","length","$emit","map","b","c","latestSubmitComponentStateBuckets","currentComponentStateBucket","currentComponentStateBucketChoiceIds","bucketFromSubmitComponentState","latestSubmitComponentStateChoiceIds","choiceIndexInBucket","currentBucketChoiceId","isAuthorHasSpecifiedACorrectPosition","privateNotebookItem","isNotebookEnabled","importPrivateNotes","value","content","text","attachments","attachment","iconURL","localNotebookItemId","setBucketWidth","setNumChoiceColumns","setChoiceStyle","setBucketStyle","choicesLabel","$translate","getChoices","n","Math","round","choiceColumns","bucketsJSONString","angular","toJson","getBuckets","fromJson","getNumSubmitsLeft","choiceIdsExcludedFromFeedback","bucketId","i","item","position","feedbackObject","getFeedbackObject","feedback","correctPosition","feedbackIsCorrect","isAuthorHasSpecifiedACorrectBucket","doesPositionNotMatter","isIncorrectPosition","incorrectPositionFeedback","getAllFeedback","bucketFeedback","choiceFeedback","feedbackPosition","ordered","createNewComponentState","clearFeedback","processDirtyStudentWork","getCopyOfBuckets","componentType","createComponentStateAdditionalProcessing","componentStates","mergedBuckets","mergeBucket","mergedComponentState","bucketFound","tempBucket","mergeChoices","choices1","choices2","choices1Ids","getIds","choice2","objects","ids","object","confirm","prompt","title","placeholder","cancel","ok","show","result","newChoice","generateKey","studentCreated","ComponentController","$inject"],"mappings":"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","file":"matchController.js","sourcesContent":["'use strict';\n\nimport ComponentController from \"../componentController\";\n\nclass MatchController extends ComponentController {\n  constructor($filter,\n      $mdDialog,\n      $mdMedia,\n      $q,\n      $rootScope,\n      $scope,\n      AnnotationService,\n      ConfigService,\n      dragulaService,\n      MatchService,\n      NodeService,\n      NotebookService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$q = $q;\n    this.dragulaService = dragulaService;\n    this.MatchService = MatchService;\n    this.$mdMedia = $mdMedia;\n    this.autoScroll = require('dom-autoscroller');\n\n    this.choices = [];\n    this.buckets = [];\n    this.isCorrect = null;\n    this.bucketWidth = 100; // the flex (%) width for displaying the buckets\n    this.numChoiceColumns = 1;\n    this.isHorizontal = this.componentContent.horizontal; // whether to orient the choices and buckets side-by-side\n    this.choiceStyle = '';\n    this.bucketStyle = '';\n    this.sourceBucketId = '0';\n    this.hasCorrectAnswer = false;\n    this.isLatestComponentStateSubmit = false;\n    this.sourceBucket = null;\n\n    this.privateNotebookItems = [];\n\n    if (this.mode === 'student') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n      if (this.shouldImportPrivateNotes()) {\n        this.privateNotebookItems = this.NotebookService.getPrivateNotebookItems();\n        this.$rootScope.$on('notebookUpdated', (event, args) => {\n          if (args.notebookItem.type === 'note') {\n            this.addNotebookItemToSourceBucket(args.notebookItem);\n          }\n        });\n      }\n    } else if (this.mode === 'grading' || this.mode === 'gradingRevision') {\n      this.isPromptVisible = false;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n      if (this.shouldImportPrivateNotes()) {\n        this.privateNotebookItems = this.NotebookService.getPrivateNotebookItems(this.workgroupId);\n      }\n    } else if (this.mode === 'onlyShowWork') {\n      this.isPromptVisible = false;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    } else if (this.mode === 'showPreviousWork') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    }\n\n    this.hasCorrectAnswer = this.hasCorrectChoices();\n    this.initializeChoices();\n    this.initializeBuckets();\n    const componentState = this.$scope.componentState;\n    if (this.mode == 'student') {\n      if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n        this.handleConnectedComponents();\n      }  else if (this.MatchService.componentStateHasStudentWork(componentState, this.componentContent)) {\n        this.setStudentWork(componentState);\n      } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        this.handleConnectedComponents();\n      }\n    } else if (componentState != null) {\n      this.setStudentWork(componentState);\n    }\n\n    if (componentState != null && componentState.isSubmit) {\n      this.isLatestComponentStateSubmit = componentState.isSubmit === true;\n    }\n\n    if (this.studentHasUsedAllSubmits()) {\n      this.isDisabled = true;\n      this.isSubmitButtonDisabled = true;\n    }\n\n    this.disableComponentIfNecessary();\n\n    this.registerDragListeners();\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param {boolean} isSubmit whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return {promise} a promise of a component state containing the student data\n     */\n    this.$scope.getComponentState = (isSubmit) => {\n      const deferred = this.$q.defer();\n      let hasDirtyWork = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.matchController.isSubmitDirty) {\n          hasDirtyWork = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.matchController.isDirty) {\n          hasDirtyWork = true;\n          action = 'save';\n        }\n      }\n\n      if (hasDirtyWork) {\n        this.$scope.matchController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        deferred.resolve();\n      }\n      return deferred.promise;\n    };\n\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  }\n\n  addNotebookItemToSourceBucket(notebookItem) {\n    const choice = this.createChoiceFromNotebookItem(notebookItem);\n    this.choices.push(choice);\n    const sourceBucket = this.getBucketById(this.sourceBucketId);\n    sourceBucket.items.push(choice);\n  }\n\n  studentHasUsedAllSubmits() {\n    return this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount;\n  }\n\n  registerDragListeners() {\n    const dragId = 'match_' + this.componentId;\n    this.registerStudentDataChangedOnDrop(dragId);\n    this.disableDraggingIfNeeded(dragId);\n    const drake = this.dragulaService.find(this.$scope, dragId).drake;\n    this.showVisualIndicatorWhileDragging(drake);\n    this.supportScrollWhileDragging(drake);\n  }\n\n  registerStudentDataChangedOnDrop(dragId) {\n    const dropEvent = dragId + '.drop-model';\n    this.$scope.$on(dropEvent, (e, el, container, source) => {\n      this.$scope.matchController.studentDataChanged();\n    });\n  }\n\n  disableDraggingIfNeeded(dragId) {\n    this.dragulaService.options(this.$scope, dragId, {\n      moves: (el, source, handle, sibling) => {\n        return !this.$scope.matchController.isDisabled;\n      }\n    });\n  }\n\n  showVisualIndicatorWhileDragging(drake) {\n    drake.on('over', (el, container, source) => {\n      if (source !== container) {\n        container.className += ' match-bucket__contents--over';\n      }\n    }).on('out', (el, container, source) => {\n      if (source !== container) {\n        container.className = container.className.replace('match-bucket__contents--over', '');;\n      }\n    });\n  }\n\n  supportScrollWhileDragging(drake) {\n    this.autoScroll(\n      [document.querySelector('#content')], {\n        margin: 30,\n        pixels: 50,\n        scrollWhenOutside: true,\n        autoScroll: function() {\n          // Only scroll when the pointer is down, and there is a child being dragged\n          return this.down && drake.dragging;\n        }\n      });\n  }\n\n  handleNodeSubmit() {\n    this.submit('nodeSubmitButton');\n  }\n\n  setStudentWork(componentState) {\n    const studentData = componentState.studentData;\n    const componentStateBuckets = studentData.buckets;\n    const sourceBucket = this.getBucketById(this.sourceBucketId);\n    sourceBucket.items = []; // clear the source bucket\n    const bucketIds = this.getBucketIds();\n    const choiceIds = this.getChoiceIds();\n\n    for (let componentStateBucket of componentStateBuckets) {\n      let componentStateBucketId = componentStateBucket.id;\n      if (bucketIds.indexOf(componentStateBucketId) > -1) {\n        for (let currentChoice of componentStateBucket.items) {\n          const currentChoiceId = currentChoice.id;\n          const currentChoiceLocation = choiceIds.indexOf(currentChoiceId);\n          const bucket = this.getBucketById(componentStateBucketId);\n          if (currentChoiceLocation > -1) {\n            // choice is valid and used by student in a valid bucket, so add it to that bucket\n\n            // content for choice with this id may have changed, so get updated content\n            const updatedChoice = this.getChoiceById(currentChoiceId);\n            bucket.items.push(updatedChoice);\n            choiceIds.splice(currentChoiceLocation, 1);\n          } else {\n            bucket.items.push(currentChoice);\n          }\n        }\n      }\n    }\n\n    // add unused choices to the source bucket\n    for (let choiceId of choiceIds) {\n      sourceBucket.items.push(this.getChoiceById(choiceId));\n    }\n\n    const submitCounter = studentData.submitCounter;\n    if (submitCounter != null) {\n      this.submitCounter = submitCounter;\n    }\n\n    if (this.submitCounter > 0) {\n      if (componentState.isSubmit) {\n        this.checkAnswer()\n      } else {\n        /*\n         * This component state was not a submit, but the student\n         * submitted some time in the past. We want to show the\n         * feedback for choices that have not moved since the\n         * student submitted.\n         */\n        this.processPreviousStudentWork();\n      }\n    } else {\n      /*\n       * there was no submit in the past but we will still need to\n       * check if submit is dirty.\n       */\n      this.processPreviousStudentWork();\n    }\n  }\n\n  /**\n   * Get the latest submitted componentState and display feedback for choices\n   * that haven't changed since. This will also determine if submit is dirty.\n   */\n  processPreviousStudentWork() {\n    const latestComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n    if (latestComponentState == null) {\n      return;\n    }\n\n    const serverSaveTime = latestComponentState.serverSaveTime;\n    const clientSaveTime = this.ConfigService.convertToClientTimestamp(serverSaveTime);\n    if (latestComponentState.isSubmit === true) {\n      this.isCorrect = latestComponentState.isCorrect;\n      this.setIsSubmitDirty(false);\n      this.setSubmittedMessage(clientSaveTime);\n      this.checkAnswer();\n    } else {\n      const latestSubmitComponentState =\n          this.StudentDataService.getLatestSubmitComponentState(this.nodeId, this.componentId);\n      if (latestSubmitComponentState != null) {\n        this.showFeedbackOnUnchangedChoices(latestSubmitComponentState);\n      } else {\n        this.isCorrect = null;\n        this.setIsSubmitDirty(false);\n        this.setSavedMessage(clientSaveTime);\n      }\n    }\n  };\n\n  /**\n   * There is unsaved student work that is not yet saved in a component state\n   */\n  processDirtyStudentWork() {\n    const latestSubmitComponentState =\n        this.StudentDataService.getLatestSubmitComponentState(this.nodeId, this.componentId);\n    if (latestSubmitComponentState != null) {\n      this.showFeedbackOnUnchangedChoices(latestSubmitComponentState);\n    } else {\n      const latestComponentState = this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n      if (latestComponentState != null) {\n        this.isCorrect = null;\n        this.setIsSubmitDirty(true);\n        this.setSavedMessage(latestComponentState.clientSaveTime);\n      }\n    }\n  };\n\n  showFeedbackOnUnchangedChoices(latestSubmitComponentState) {\n    const choicesThatChangedSinceLastSubmit = this.getChoicesThatChangedSinceLastSubmit(latestSubmitComponentState);\n    if (choicesThatChangedSinceLastSubmit.length > 0) {\n      this.setIsSubmitDirty(true);\n    } else {\n      this.setIsSubmitDirty(false);\n    }\n    this.checkAnswer(choicesThatChangedSinceLastSubmit);\n  }\n\n  setIsSubmitDirty(isSubmitDirty) {\n    this.isSubmitDirty = isSubmitDirty;\n    this.$scope.$emit('componentSubmitDirty', {componentId: this.componentId, isDirty: isSubmitDirty});\n  }\n\n  isLatestComponentStateASubmit() {\n\n  }\n\n  getBucketIds() {\n    return this.buckets.map(b => { return b.id; });\n  }\n\n  getChoiceIds() {\n    return this.choices.map(c => { return c.id; });\n  }\n\n  getChoicesThatChangedSinceLastSubmit(latestSubmitComponentState) {\n    const latestSubmitComponentStateBuckets = latestSubmitComponentState.studentData.buckets;\n    const choicesThatChangedSinceLastSubmit = [];\n    for (let currentComponentStateBucket of this.buckets) {\n      const currentComponentStateBucketChoiceIds = currentComponentStateBucket.items.map(choice => { return choice.id; });\n      let bucketFromSubmitComponentState = this.getBucketById(currentComponentStateBucket.id, latestSubmitComponentStateBuckets);\n      if (bucketFromSubmitComponentState != null) {\n        const latestSubmitComponentStateChoiceIds =\n            bucketFromSubmitComponentState.items.map(choice => { return choice.id; });\n\n        for (let choiceIndexInBucket = 0; choiceIndexInBucket < currentComponentStateBucketChoiceIds.length; choiceIndexInBucket++) {\n          const currentBucketChoiceId = currentComponentStateBucketChoiceIds[choiceIndexInBucket];\n          if (latestSubmitComponentStateChoiceIds.indexOf(currentBucketChoiceId) == -1) {\n            choicesThatChangedSinceLastSubmit.push(currentBucketChoiceId);\n          } else if (this.isAuthorHasSpecifiedACorrectPosition(currentBucketChoiceId) &&\n              choiceIndexInBucket != latestSubmitComponentStateChoiceIds.indexOf(currentBucketChoiceId)) {\n            choicesThatChangedSinceLastSubmit.push(currentBucketChoiceId);\n          }\n        }\n      }\n    }\n    return choicesThatChangedSinceLastSubmit;\n  }\n\n  getChoices() {\n    return this.choices;\n  }\n\n  initializeChoices() {\n    this.choices = this.componentContent.choices;\n    if (this.shouldImportPrivateNotes()) {\n      for (let privateNotebookItem of this.privateNotebookItems) {\n        if (privateNotebookItem.type === 'note') {\n          this.choices.push(this.createChoiceFromNotebookItem(privateNotebookItem));\n        }\n      }\n    }\n  }\n\n  shouldImportPrivateNotes() {\n    return this.isNotebookEnabled() && this.componentContent.importPrivateNotes;\n  }\n\n  createChoiceFromNotebookItem(notebookItem) {\n    let value = notebookItem.content.text;\n    for (let attachment of notebookItem.content.attachments) {\n      value += '<br/><img src=\"' + attachment.iconURL + '\"/>';\n    }\n    return {\n      id: notebookItem.localNotebookItemId,\n      value: value,\n      type: 'choice'\n    }\n  }\n\n  initializeBuckets() {\n    this.buckets = [];\n    this.setBucketWidth();\n    this.setNumChoiceColumns();\n    this.setChoiceStyle();\n    this.setBucketStyle();\n    this.sourceBucket = {\n      id: this.sourceBucketId,\n      value: this.componentContent.choicesLabel ? this.componentContent.choicesLabel : this.$translate('match.choices'),\n      type: 'bucket',\n      items: []\n    };\n    for (let choice of this.getChoices()) {\n      this.sourceBucket.items.push(choice);\n    }\n    this.buckets.push(this.sourceBucket);\n    for (let bucket of this.componentContent.buckets) {\n      bucket.items = [];\n      this.buckets.push(bucket);\n    }\n  }\n\n  setBucketWidth() {\n    if (this.isHorizontal) {\n      this.bucketWidth = 100;\n    } else {\n      if (typeof this.componentContent.bucketWidth === 'number') {\n        this.bucketWidth = this.componentContent.bucketWidth;\n      } else {\n        let n = this.componentContent.buckets.length;\n        if (n % 3 === 0 || n > 4) {\n          this.bucketWidth = Math.round(100/3);\n        } else if (n % 2 === 0) {\n          this.bucketWidth = 100/2;\n        }\n      }\n    }\n  }\n\n  setNumChoiceColumns() {\n    if (this.isHorizontal) {\n      this.numChoiceColumns = 1;\n    } else {\n      if (typeof this.componentContent.bucketWidth === 'number') {\n        this.numChoiceColumns = Math.round(100/this.componentContent.bucketWidth);\n      } else {\n        let n = this.componentContent.buckets.length;\n        if (n % 3 === 0 || n > 4) {\n          this.numChoiceColumns = 3;\n        } else if (n % 2 === 0) {\n          this.numChoiceColumns = 2;\n        }\n      }\n      if (typeof this.componentContent.choiceColumns === 'number') {\n        this.numChoiceColumns = this.componentContent.choiceColumns;\n      }\n    }\n  }\n\n  setChoiceStyle() {\n    this.choiceStyle = {\n      '-moz-column-count': this.numChoiceColumns,\n      '-webkit-column-count': this.numChoiceColumns,\n      'column-count':this.numChoiceColumns\n    };\n  }\n\n  setBucketStyle() {\n    if (this.bucketWidth === 100) {\n      this.bucketStyle = this.choiceStyle;\n    }\n  }\n\n  getBuckets() {\n    return this.buckets;\n  };\n\n  /**\n   * Create a copy of the array of buckets with brand new objects.\n   * @return {array}\n   */\n  getCopyOfBuckets() {\n    const bucketsJSONString = angular.toJson(this.getBuckets());\n    return angular.fromJson(bucketsJSONString);\n  }\n\n  getNumSubmitsLeft() {\n    return this.componentContent.maxSubmitCount - this.submitCounter;\n  }\n\n  hasStudentUsedAllSubmits() {\n    return this.getNumSubmitsLeft() <= 0;\n  }\n\n  /**\n   * Check if the student has answered correctly and show feedback.\n   * @param {array} choice ids to not show feedback for\n   */\n  checkAnswer(choiceIdsExcludedFromFeedback = []) {\n    let isCorrect = true;\n    let buckets = this.getBuckets();\n    for (let bucket of buckets) {\n      let bucketId = bucket.id;\n      let items = bucket.items;\n      for (let i = 0; i < items.length; i++) {\n        let item = items[i];\n        let position = i + 1;\n        let choiceId = item.id;\n        let feedbackObject = this.getFeedbackObject(bucketId, choiceId);\n        if (feedbackObject != null) {\n          let feedback = feedbackObject.feedback;\n          let correctPosition = feedbackObject.position;\n          let feedbackIsCorrect = feedbackObject.isCorrect;\n          if (this.hasCorrectAnswer) {\n            if (!this.isAuthorHasSpecifiedACorrectBucket(choiceId)) {\n              if (bucketId == this.sourceBucketId) {\n                // set this choice as correct because this choice belongs in the source bucket\n                feedbackIsCorrect = true;\n              }\n            }\n          }\n\n          if (feedback == '') {\n            if (this.hasCorrectAnswer) {\n              if (feedbackIsCorrect) {\n                feedback = this.$translate('CORRECT');\n              } else {\n                feedback = this.$translate('INCORRECT');\n              }\n            }\n          }\n\n          if (this.doesPositionNotMatter(correctPosition)) {\n            item.feedback = feedback;\n            item.isCorrect = feedbackIsCorrect;\n            item.isIncorrectPosition = false;\n            isCorrect = isCorrect && feedbackIsCorrect;\n          } else {\n            /*\n             * position does matter and the choice is in a correct\n             * bucket. we know this because a feedback object will\n             * only have a non-null position value if the choice is\n             * in the correct bucket. if the feedback object is for\n             * a choice that is in an incorrect bucket, the position\n             * value will be null.\n             */\n            if (position === correctPosition) {\n              item.feedback = feedback;\n              item.isCorrect = feedbackIsCorrect;\n              item.isIncorrectPosition = false;\n              isCorrect = isCorrect && feedbackIsCorrect;\n            } else {\n              // item is in the correct bucket but wrong position\n              let incorrectPositionFeedback = feedbackObject.incorrectPositionFeedback;\n              if (incorrectPositionFeedback == null || incorrectPositionFeedback == '') {\n                incorrectPositionFeedback = this.$translate('match.correctBucketButWrongPosition');\n              }\n              item.feedback = incorrectPositionFeedback;\n              item.isCorrect = false;\n              item.isIncorrectPosition = true;\n              isCorrect = false;\n            }\n          }\n        }\n\n        if (!this.hasCorrectAnswer) {\n          item.isCorrect = null;\n          item.isIncorrectPosition = null;\n        }\n\n        if (choiceIdsExcludedFromFeedback.indexOf(choiceId) > -1) {\n          item.feedback = null;\n        }\n      }\n    }\n\n    if (this.hasCorrectAnswer) {\n      this.isCorrect = isCorrect;\n    } else {\n      this.isCorrect = null;\n    }\n  }\n\n  /**\n   * Get the array of feedback\n   * @return {array} the array of feedback objects\n   */\n  getAllFeedback() {\n    return this.componentContent.feedback;\n  }\n\n  /**\n   * Get the feedback object for the combination of bucket and choice\n   * @param {string} bucketId the bucket id\n   * @param {string} choiceId the choice id\n   * @return {object} the feedback object for the combination of bucket and choice\n   */\n  getFeedbackObject(bucketId, choiceId) {\n    for (let bucketFeedback of this.getAllFeedback()) {\n      if (bucketFeedback.bucketId === bucketId) {\n        for (let choiceFeedback of bucketFeedback.choices) {\n          if (choiceFeedback.choiceId === choiceId) {\n            return choiceFeedback;\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  doesPositionNotMatter(feedbackPosition) {\n    return !this.componentContent.ordered || feedbackPosition == null;\n  }\n\n  studentDataChanged() {\n    this.isCorrect = null;\n    this.isLatestComponentStateSubmit = false;\n    super.studentDataChanged();\n  }\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n    let componentState = this.NodeService.createNewComponentState();\n    let studentData = {};\n    if (action === 'submit') {\n      this.checkAnswer();\n      if (this.hasCorrectAnswer && this.isCorrect != null) {\n        studentData.isCorrect = this.isCorrect;\n      }\n      this.isLatestComponentStateSubmit = true;\n    } else {\n      this.clearFeedback();\n      this.processDirtyStudentWork();\n      this.isLatestComponentStateSubmit = false;\n    }\n\n    /*\n     * Create a copy of the buckets so we don't accidentally change a bucket and have it also\n     * change previous versions of the buckets.\n     */\n    studentData.buckets = this.getCopyOfBuckets();\n    componentState.isSubmit = this.isSubmit;\n    studentData.submitCounter = this.submitCounter;\n\n    /*\n     * reset the isSubmit value so that the next component state\n     * doesn't maintain the same value\n     */\n    this.isSubmit = false;\n\n    componentState.studentData = studentData;\n    componentState.componentType = 'Match';\n    componentState.nodeId = this.nodeId;\n    componentState.componentId = this.componentId;\n\n    let deferred = this.$q.defer();\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n    return deferred.promise;\n  }\n\n  /**\n   * Get the choice by id from the authoring component content\n   * @param {string} id the choice id\n   * @returns {object} the choice object from the authoring component content\n   */\n  getChoiceById(id) {\n    for (let choice of this.componentContent.choices) {\n      if (choice.id === id) {\n        return choice;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the choice with the given text.\n   * @param {string} text look for a choice with this text\n   * @returns {object} the choice with the given text\n   */\n  getChoiceByText(text) {\n    for (let choice of this.componentContent.choices) {\n      if (choice.value === text) {\n        return choice;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the bucket by id from the authoring component content.\n   * @param {string} id the bucket id\n   * @param {array} buckets (optional) the buckets to get the bucket from\n   * @returns {object} the bucket object from the authoring component content\n   */\n  getBucketById(id, buckets = this.buckets) {\n    for (let bucket of buckets) {\n      if (bucket.id == id) {\n        return bucket;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the choice value by id from the authoring component content\n   * @param {string} choiceId the choice id\n   * @returns {string} the choice value from the authoring component content\n   */\n  getChoiceValueById(choiceId) {\n    const choice = this.getChoiceById(choiceId);\n    if (choice != null) {\n      return choice.value;\n    }\n    return null;\n  }\n\n  /**\n   * Get the bucket value by id from the authoring component content\n   * @param {string} bucketId the bucket id\n   * @returns {string} the bucket value from the authoring component content\n   */\n  getBucketValueById(bucketId) {\n    const bucket = this.getBucketById(bucketId);\n    if (bucket != null) {\n      return bucket.value;\n    }\n    return null;\n  }\n\n  /**\n   * Check if the component has been authored with a correct choice\n   * @return {boolean} whether the component has been authored with a correct choice\n   */\n  hasCorrectChoices() {\n    for (let bucket of this.componentContent.feedback) {\n      for (let choice of bucket.choices) {\n        if (choice.isCorrect) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  clearFeedback() {\n    for (let choice of this.getChoices()) {\n      choice.isCorrect = null;\n      choice.isIncorrectPosition = null;\n      choice.feedback = null;\n    }\n  }\n\n  /**\n   * Check if a choice has a correct bucket\n   * @param {string} choiceId the choice id\n   * @return {boolean} whether the choice has a correct bucket\n   */\n  isAuthorHasSpecifiedACorrectBucket(choiceId) {\n    for (let bucket of this.getAllFeedback()) {\n      for (let choice of bucket.choices) {\n        if (choice.choiceId === choiceId) {\n          if (choice.isCorrect) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Returns true if the choice has been authored to have a correct position\n   * @param {string} choiceId the choice id\n   * @return {boolean} whether the choice has a correct position in any bucket\n   */\n  isAuthorHasSpecifiedACorrectPosition(choiceId) {\n    for (let bucket of this.getAllFeedback()) {\n      for (let choice of bucket.choices) {\n        if (choice.choiceId === choiceId) {\n          if (choice.position != null) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  choiceIsInCorrectPosition(choiceId) {\n    // dummy. not called.\n    // TODO: implement me.\n    return false;\n  }\n\n  /**\n   * Create a component state with the merged student responses\n   * @param {array} componentStates an array of component states\n   * @return {object} a component state with the merged student responses\n   */\n  createMergedComponentState(componentStates) {\n    const mergedBuckets = [];\n    for (let componentState of componentStates) {\n      for (let bucket of componentState.studentData.buckets) {\n        this.mergeBucket(mergedBuckets, bucket);\n      }\n    }\n    const mergedComponentState = this.NodeService.createNewComponentState();\n    mergedComponentState.studentData = {\n      buckets: mergedBuckets\n    };\n    return mergedComponentState;\n  }\n\n  /**\n   * Merge a bucket into the array of buckets\n   * @param {array} buckets an array of buckets to merge into\n   * @param {object} bucket the bucket to merge into the array of buckets\n   * @return {array} an array of buckets with the merged bucket\n   */\n  mergeBucket(buckets, bucket) {\n    let bucketFound = false;\n    for (let tempBucket of buckets) {\n      if (tempBucket.id == bucket.id) {\n        /*\n         * the bucket is already in the array of buckets so we\n         * will just merge the items\n         */\n        bucketFound = true;\n        this.mergeChoices(tempBucket.items, bucket.items);\n      }\n    }\n    if (!bucketFound) {\n      /*\n       * the bucket was not in the array of buckets so we will add the\n       * bucket\n       */\n      buckets.push(bucket);\n    }\n    return buckets;\n  }\n\n  /**\n   * Merge the items. Only merge the items with an id that is not already in\n   * the array of items.\n   * @param {array} choices1 an array of choice objects\n   * @param {array} choices2 an array of choice objects\n   * @return {array} an array of objects that have been merged\n   */\n  mergeChoices(choices1, choices2) {\n    const choices1Ids = this.getIds(choices1);\n    for (let choice2 of choices2) {\n      if (choices1Ids.indexOf(choice2.id) == -1) {\n        choices1.push(choice2);\n      }\n    }\n    return choices1;\n  }\n\n  /**\n   * Get the ids from the array of objects\n   * @param {array} objects an array of objects that have ids\n   * @param {array} an array of id strings\n   */\n  getIds(objects) {\n    const ids = [];\n    for (let object of objects) {\n      ids.push(object.id);\n    }\n    return ids;\n  }\n\n  addChoice() {\n    const confirm = this.$mdDialog.prompt()\n        .title(this.$translate('match.enterChoiceText'))\n        .placeholder(this.$translate('match.typeSomething'))\n        .cancel(this.$translate('CANCEL'))\n        .ok(this.$translate('OK'));\n    this.$mdDialog.show(confirm).then((result) => {\n      if (result != null && result != '') {\n        const newChoice = {\n          id: this.UtilService.generateKey(10),\n          value: result,\n          type: 'choice',\n          studentCreated: true\n        };\n        this.sourceBucket.items.push(newChoice);\n        this.studentDataChanged();\n      }\n    });\n  }\n\n  deleteChoice(choice) {\n    if (confirm(this.$translate('match.areYouSureYouWantToDeleteThisChoice'))) {\n      const buckets = this.getBuckets();\n      for (let bucket of buckets) {\n        const items = bucket.items;\n        for (let i = 0; i < items.length; i++) {\n          const item = items[i];\n          if (item.id == choice.id) {\n            items.splice(i, 1);\n          }\n        }\n      }\n      this.studentDataChanged();\n    }\n  }\n}\n\nMatchController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$mdMedia',\n  '$q',\n  '$rootScope',\n  '$scope',\n  'AnnotationService',\n  'ConfigService',\n  'dragulaService',\n  'MatchService',\n  'NodeService',\n  'NotebookService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default MatchController;\n"]}