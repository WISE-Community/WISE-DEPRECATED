{"version":3,"sources":["openResponseController.es6"],"names":["OpenResponseController","$filter","$mdDialog","$q","$rootScope","$scope","AnnotationService","ConfigService","CRaterService","NodeService","NotebookService","NotificationService","OpenResponseService","ProjectService","StudentAssetService","StudentDataService","UtilService","studentResponse","isRichTextEnabled","onlyShowWork","messageDialog","useCustomCompletionCriteria","isVerifyingCRaterItemId","cRaterItemIdIsValid","themePath","getThemePath","tinymceOptions","menubar","plugins","toolbar","autoresize_bottom_margin","autoresize_min_height","image_advtab","content_css","setup","ed","on","e","$","target","editorContainer","addClass","parent","id","removeClass","mode","isPromptVisible","isSaveButtonVisible","componentContent","showSaveButton","isSubmitButtonVisible","showSubmitButton","isDisabled","componentState","completionCriteria","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","starterSentence","maxSubmitCount","submitCounter","isSubmitButtonDisabled","disableComponentIfNecessary","isDirty","openResponseController","bind","getComponentState","isSubmit","deferred","defer","getState","action","isSubmitDirty","createComponentState","then","resolve","promise","$on","event","args","requester","nodeId","componentId","notebookItem","studentWorkId","content","studentWorkIds","importWorkByStudentWorkId","script","retrieveScript","Function","call","$broadcast","submit","studentData","response","attachments","processLatestStudentWork","numberOfSubmitsLeft","message","isPerformSubmit","alert","$translate","confirm","createNewComponentState","getStudentResponse","angular","copy","parentStudentWorkIds","componentType","createComponentStateAdditionalProcessing","performCRaterScoring","isCRaterScoreOnSubmit","isCRaterScoreOnSave","isCRaterScoreOnChange","cRaterItemType","getCRaterItemType","cRaterItemId","getCRaterItemId","cRaterRequestType","cRaterResponseId","Date","getTime","show","template","escapeToClose","makeCRaterRequest","result","data","annotations","score","concepts","previousScore","autoScoreAnnotationData","value","maxAutoScore","getMaxScoreForComponent","autoGrader","autoScoreAnnotation","createAutoScoreAnnotation","annotationGroupForScore","$parent","nodeController","latestAnnotations","getLatestComponentAnnotations","enableGlobalAnnotations","globalAnnotationSettings","globalAnnotationMaxCount","getGlobalAnnotationGroupByScore","globalAnnotationGroupsByNodeIdAndComponentId","getAllGlobalAnnotationGroups","annotationGroupCreatedTime","clientSaveTime","length","isGlobal","unGlobalizeCriteria","map","params","criteriaCreatedTimestamp","merge","push","autoComment","cRater","enableMultipleAttemptScoringRules","getMultipleAttemptCRaterFeedbackTextByScore","getCRaterFeedbackTextByScore","autoCommentAnnotationData","autoCommentAnnotation","createAutoCommentAnnotation","comment","enableNotifications","notificationForScore","getNotificationByScore","sendNotificationForScore","isPopup","$emit","hide","hasAdditionalProcessingFunctions","additionalProcessingFunctions","getAdditionalProcessingFunctions","allPromises","i","additionalProcessingFunction","all","runId","getRunId","periodId","getPeriodId","toWorkgroupId","getWorkgroupId","annotation","numRows","numColumns","$event","deregisterListener","studentWork","imageObject","noteText","isEditTextEnabled","isFileUploadEnabled","addNote","saveButtonClicked","getLatestComponentStateByNodeIdAndComponentId","isCRaterEnabled","isCRaterScoreOnExit","getComponentStatesByNodeIdAndComponentId","componentStates","mergedComponentState","mergedResponse","c","ComponentController","$inject"],"mappings":"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","file":"openResponseController.js","sourcesContent":["'use strict';\n\nimport ComponentController from \"../componentController\";\n\nclass OpenResponseController extends ComponentController {\n\n  constructor($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      AnnotationService,\n      ConfigService,\n      CRaterService,\n      NodeService,\n      NotebookService,\n      NotificationService,\n      OpenResponseService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$q = $q;\n    this.CRaterService = CRaterService;\n    this.NotificationService = NotificationService;\n    this.OpenResponseService = OpenResponseService;\n\n    // holds the text that the student has typed\n    this.studentResponse = '';\n\n    // whether rich text editing is enabled\n    this.isRichTextEnabled = false;\n\n    // whether we're only showing the student work\n    this.onlyShowWork = false;\n\n    // used to hold a message dialog if we need to use one\n    this.messageDialog = null;\n\n    // whether this component uses a custom completion criteria\n    this.useCustomCompletionCriteria = false;\n\n    // whether we are currently verifying a CRater item id\n    this.isVerifyingCRaterItemId = false;\n\n    // whether the CRater item id is valid\n    this.cRaterItemIdIsValid = null;\n\n    //var scope = this;\n    let themePath = this.ProjectService.getThemePath();\n\n    // TODO: make toolbar items and plugins customizable by authors (OR strip down to only special characters, support for equations)\n    // Rich text editor options\n    this.tinymceOptions = {\n      //onChange: function(e) {\n      //scope.studentDataChanged();\n      //},\n      menubar: false,\n      plugins: 'link image media autoresize', //imagetools\n      toolbar: 'undo redo | bold italic | superscript subscript | bullist numlist | alignleft aligncenter alignright | link image media',\n      autoresize_bottom_margin: '0',\n      autoresize_min_height: '100',\n      image_advtab: true,\n      content_css: themePath + '/style/tinymce.css',\n      setup: function (ed) {\n        ed.on('focus', function (e) {\n          $(e.target.editorContainer).addClass('input--focused').parent().addClass('input-wrapper--focused');\n          $('label[for=\"' + e.target.id + '\"]').addClass('input-label--focused');\n        });\n\n        ed.on('blur', function (e) {\n          $(e.target.editorContainer).removeClass('input--focused').parent().removeClass('input-wrapper--focused');\n          $('label[for=\"' + e.target.id + '\"]').removeClass('input-label--focused');\n        });\n      }\n    };\n\n    if (this.mode === 'student') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n    } else if (this.mode === 'grading') {\n      this.isPromptVisible = false;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    } else if (this.mode === 'onlyShowWork') {\n      this.onlyShowWork = true;\n      this.isPromptVisible = false;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    } else if (this.mode === 'showPreviousWork') {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    }\n\n    var componentState = null;\n\n    // set whether rich text is enabled\n    this.isRichTextEnabled = this.componentContent.isRichTextEnabled;\n\n    if (this.componentContent.completionCriteria != null) {\n      this.useCustomCompletionCriteria = true;\n    }\n\n    // get the component state from the scope\n    componentState = this.$scope.componentState;\n\n    if (this.mode == 'student') {\n      if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n        // we will show work from another component\n        this.handleConnectedComponents();\n      }  else if (componentState != null &&\n        this.OpenResponseService.componentStateHasStudentWork(componentState, this.componentContent)) {\n        /*\n         * the student has work so we will populate the work into this\n         * component\n         */\n        this.setStudentWork(componentState);\n      } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        // we will import work from another component\n        this.handleConnectedComponents();\n      } else if (componentState == null) {\n        // check if we need to import work\n\n        if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n          /*\n           * the student does not have any work and there are connected\n           * components so we will get the work from the connected\n           * components\n           */\n          this.handleConnectedComponents();\n        } else if (this.componentContent.starterSentence != null) {\n          /*\n           * the student has not done any work and there is a starter sentence\n           * so we will populate the textarea with the starter sentence\n           */\n          this.studentResponse = this.componentContent.starterSentence;\n        }\n      }\n    } else {\n      // populate the student work into this component\n      this.setStudentWork(componentState);\n    }\n\n    // check if the student has used up all of their submits\n    if (this.componentContent.maxSubmitCount != null && this.submitCounter >= this.componentContent.maxSubmitCount) {\n      /*\n       * the student has used up all of their chances to submit so we\n       * will disable the submit button\n       */\n      this.isSubmitButtonDisabled = true;\n    }\n\n    this.disableComponentIfNecessary();\n\n    /**\n     * Returns true iff there is student work that hasn't been saved yet\n     */\n    this.$scope.isDirty = function() {\n      return this.$scope.openResponseController.isDirty;\n    }.bind(this);\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return a promise of a component state containing the student data\n     */\n    this.$scope.getComponentState = function(isSubmit) {\n      var deferred = this.$q.defer();\n      let getState = false;\n      let action = 'change';\n\n      if (isSubmit) {\n        if (this.$scope.openResponseController.isSubmitDirty) {\n          getState = true;\n          action = 'submit';\n        }\n      } else {\n        if (this.$scope.openResponseController.isDirty) {\n          getState = true;\n          action = 'save';\n        }\n      }\n\n      if (getState) {\n        // create a component state populated with the student data\n        this.$scope.openResponseController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        /*\n         * the student does not have any unsaved changes in this component\n         * so we don't need to save a component state for this component.\n         * we will immediately resolve the promise here.\n         */\n        deferred.resolve();\n      }\n\n      return deferred.promise;\n    }.bind(this);\n\n    /**\n     * Listen for the 'exitNode' event which is fired when the student\n     * exits the parent node. This will perform any necessary cleanup\n     * when the student exits the parent node.\n     */\n    this.$scope.$on('exitNode', function(event, args) {\n\n    }.bind(this));\n\n    this.$scope.$on('notebookItemChosen', (event, args) => {\n      if (args.requester == this.nodeId + '-' + this.componentId) {\n        const notebookItem = args.notebookItem;\n        const studentWorkId = notebookItem.content.studentWorkIds[0];\n        this.importWorkByStudentWorkId(studentWorkId);\n      }\n    });\n\n    // load script for this component, if any\n    let script = this.componentContent.script;\n    if (script != null) {\n      this.ProjectService.retrieveScript(script).then((script) => {\n        new Function(script).call(this);\n      });\n    }\n\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  }\n\n  handleNodeSubmit() {\n    this.submit('nodeSubmitButton');\n  }\n\n  /**\n   * Populate the student work into the component\n   * @param componentState the component state to populate into the component\n   */\n  setStudentWork(componentState) {\n\n    if (componentState != null) {\n      var studentData = componentState.studentData;\n\n      if (studentData != null) {\n        var response = studentData.response;\n\n        if (response != null) {\n          // populate the text the student previously typed\n          this.studentResponse = response;\n        }\n\n        var submitCounter = studentData.submitCounter;\n\n        if (submitCounter != null) {\n          // populate the submit counter\n          this.submitCounter = submitCounter;\n        }\n\n        var attachments = studentData.attachments;\n\n        if (attachments != null) {\n          this.attachments = attachments;\n        }\n\n        this.processLatestStudentWork();\n      }\n    }\n  }\n\n  hasSubmitMessage() {\n    return true;\n  }\n\n  confirmSubmit(numberOfSubmitsLeft) {\n    let message = '';\n    let isPerformSubmit = false;\n\n    if (numberOfSubmitsLeft <= 0) {\n      alert(this.$translate('openResponse.youHaveNoMoreChances'));\n    } else if (numberOfSubmitsLeft == 1) {\n      message = this.$translate('openResponse.youHaveOneChance', {numberOfSubmitsLeft: numberOfSubmitsLeft});\n      isPerformSubmit = confirm(message);\n    } else if (numberOfSubmitsLeft > 1) {\n      message = this.$translate('openResponse.youHaveMultipleChances', {numberOfSubmitsLeft: numberOfSubmitsLeft});\n      isPerformSubmit = confirm(message);\n    }\n\n    return isPerformSubmit;\n  }\n\n  /**\n   * Get the student response\n   */\n  getStudentResponse() {\n    return this.studentResponse;\n  };\n\n  /**\n   * Create a new component state populated with the student data\n   * @param action the action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'\n   * @return a promise that will return a component state\n   */\n  createComponentState(action) {\n\n    var deferred = this.$q.defer();\n\n    // create a new component state\n    var componentState = this.NodeService.createNewComponentState();\n\n    // set the response into the component state\n    var studentData = {};\n\n    // get the text the student typed\n    var response = this.getStudentResponse();\n\n    studentData.response = response;\n    studentData.attachments = angular.copy(this.attachments);  // create a copy without reference to original array\n\n    // set the submit counter\n    studentData.submitCounter = this.submitCounter;\n\n    if (this.parentStudentWorkIds != null) {\n      studentData.parentStudentWorkIds = this.parentStudentWorkIds;\n    }\n\n    // set the flag for whether the student submitted this work\n    componentState.isSubmit = this.isSubmit;\n\n    // set the student data into the component state\n    componentState.studentData = studentData;\n\n    // set the component type\n    componentState.componentType = 'OpenResponse';\n\n    // set the node id\n    componentState.nodeId = this.nodeId;\n\n    // set the component id\n    componentState.componentId = this.componentId;\n\n    /*\n     * reset the isSubmit value so that the next component state\n     * doesn't maintain the same value\n     */\n    this.isSubmit = false;\n\n    /*\n     * perform any additional processing that is required before returning\n     * the component state\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n    return deferred.promise;\n  };\n\n  /**\n   * Perform any additional processing that is required before returning the\n   * component state\n   * Note: this function must call deferred.resolve() otherwise student work\n   * will not be saved\n   * @param deferred a deferred object\n   * @param componentState the component state\n   * @param action the action that we are creating the component state for\n   * e.g. 'submit', 'save', 'change'\n   */\n  createComponentStateAdditionalProcessing(deferred, componentState, action) {\n\n    var performCRaterScoring = false;\n\n    // determine if we need to perform CRater scoring\n    if (action == 'submit' && componentState.isSubmit) {\n      if (this.isCRaterScoreOnSubmit(this.componentContent)) {\n        performCRaterScoring = true;\n      }\n    } else if (action == 'save') {\n      if (this.isCRaterScoreOnSave(this.componentContent)) {\n        performCRaterScoring = true;\n      }\n    } else if (action == 'change' || action == null) {\n      if (this.isCRaterScoreOnChange(this.componentContent)) {\n        performCRaterScoring = true;\n      }\n    }\n\n    if (performCRaterScoring) {\n      // we need to perform CRater scoring\n\n      var cRaterItemType = this.CRaterService.getCRaterItemType(this.componentContent);\n      var cRaterItemId = this.CRaterService.getCRaterItemId(this.componentContent);\n      var cRaterRequestType = 'scoring';\n      var cRaterResponseId = new Date().getTime();\n      var studentData = this.studentResponse;\n\n      /*\n       * display a dialog message while the student waits for their work\n       * to be scored by CRater\n       */\n      this.$mdDialog.show({\n        template: '<md-dialog aria-label=\"' + this.$translate('openResponse.pleaseWait') + '\"><md-dialog-content><div class=\"md-dialog-content\">' + this.$translate('openResponse.pleaseWaitWeAreScoringYourWork') + '</div></md-dialog-content></md-dialog>',\n        escapeToClose: false\n      });\n\n      // make the CRater request to score the student data\n      this.CRaterService.makeCRaterRequest(cRaterItemType, cRaterItemId, cRaterRequestType, cRaterResponseId, studentData).then((result) => {\n\n        if (result != null) {\n\n          // get the CRater response\n          var data = result.data;\n\n          if (data != null) {\n\n            /*\n             * annotations we put in the component state will be\n             * removed from the component state and saved separately\n             */\n            componentState.annotations = [];\n\n            // get the CRater score\n            let score = data.score;\n            let concepts = data.concepts;\n            let previousScore = null;\n\n            if (score != null) {\n\n              // create the auto score annotation\n              let autoScoreAnnotationData = {};\n              autoScoreAnnotationData.value = score;\n              autoScoreAnnotationData.maxAutoScore = this.ProjectService.getMaxScoreForComponent(this.nodeId, this.componentId);\n              autoScoreAnnotationData.concepts = concepts;\n              autoScoreAnnotationData.autoGrader = 'cRater';\n\n              let autoScoreAnnotation = this.createAutoScoreAnnotation(autoScoreAnnotationData);\n\n              let annotationGroupForScore = null;\n\n              if (this.$scope.$parent.nodeController != null) {\n                // get the previous score and comment annotations\n                let latestAnnotations = this.$scope.$parent.nodeController.getLatestComponentAnnotations(this.componentId);\n\n                if (latestAnnotations != null && latestAnnotations.score != null &&\n                  latestAnnotations.score.data != null) {\n\n                  // get the previous score annotation value\n                  previousScore = latestAnnotations.score.data.value;\n                }\n\n                if (this.componentContent.enableGlobalAnnotations && this.componentContent.globalAnnotationSettings != null) {\n\n                  let globalAnnotationMaxCount = 0;\n                  if (this.componentContent.globalAnnotationSettings.globalAnnotationMaxCount != null) {\n                    globalAnnotationMaxCount = this.componentContent.globalAnnotationSettings.globalAnnotationMaxCount;\n                  }\n                  // get the annotation properties for the score that the student got.\n                  annotationGroupForScore = this.ProjectService.getGlobalAnnotationGroupByScore(this.componentContent, previousScore, score);\n\n                  // check if we need to apply this globalAnnotationSetting to this annotation: we don't need to if we've already reached the maxCount\n                  if (annotationGroupForScore != null) {\n                    let globalAnnotationGroupsByNodeIdAndComponentId = this.AnnotationService.getAllGlobalAnnotationGroups(this.nodeId, this.componentId);\n                    annotationGroupForScore.annotationGroupCreatedTime = autoScoreAnnotation.clientSaveTime;  // save annotation creation time\n\n                    if (globalAnnotationGroupsByNodeIdAndComponentId.length >= globalAnnotationMaxCount) {\n                      // we've already applied this annotation properties to maxCount annotations, so we don't need to apply it any more.\n                      annotationGroupForScore = null;\n                    }\n                  }\n\n                  if (annotationGroupForScore != null && annotationGroupForScore.isGlobal && annotationGroupForScore.unGlobalizeCriteria != null) {\n                    // check if this annotation is global and what criteria needs to be met to un-globalize.\n                    annotationGroupForScore.unGlobalizeCriteria.map( (unGlobalizeCriteria) => {\n                      // if the un-globalize criteria is time-based (e.g. isVisitedAfter, isRevisedAfter, isVisitedAndRevisedAfter, etc), store the timestamp of this annotation in the criteria\n                      // so we can compare it when we check for criteria satisfaction.\n                      if (unGlobalizeCriteria.params != null) {\n                        unGlobalizeCriteria.params.criteriaCreatedTimestamp = autoScoreAnnotation.clientSaveTime;  // save annotation creation time to criteria\n                      }\n                    });\n                  }\n\n                  if (annotationGroupForScore != null) {\n                    // copy over the annotation properties into the autoScoreAnnotation's data\n                    angular.merge(autoScoreAnnotation.data, annotationGroupForScore);\n                  }\n                }\n              }\n\n              componentState.annotations.push(autoScoreAnnotation);\n\n              if (this.mode === 'authoring') {\n                if (this.latestAnnotations == null) {\n                  this.latestAnnotations = {};\n                }\n\n                /*\n                 * we are in the authoring view so we will set the\n                 * latest score annotation manually\n                 */\n                this.latestAnnotations.score = autoScoreAnnotation;\n              }\n\n              var autoComment = null;\n\n              // get the submit counter\n              var submitCounter = this.submitCounter;\n\n              if (this.componentContent.cRater.enableMultipleAttemptScoringRules && submitCounter > 1) {\n                /*\n                 * this step has multiple attempt scoring rules and this is\n                 * a subsequent submit\n                 */\n                // get the feedback based upon the previous score and current score\n                autoComment = this.CRaterService.getMultipleAttemptCRaterFeedbackTextByScore(this.componentContent, previousScore, score);\n              } else {\n                // get the feedback text\n                autoComment = this.CRaterService.getCRaterFeedbackTextByScore(this.componentContent, score);\n              }\n\n              if (autoComment != null) {\n                // create the auto comment annotation\n                var autoCommentAnnotationData = {};\n                autoCommentAnnotationData.value = autoComment;\n                autoCommentAnnotationData.concepts = concepts;\n                autoCommentAnnotationData.autoGrader = 'cRater';\n\n                var autoCommentAnnotation = this.createAutoCommentAnnotation(autoCommentAnnotationData);\n\n                if (this.componentContent.enableGlobalAnnotations) {\n                  if (annotationGroupForScore != null) {\n                    // copy over the annotation properties into the autoCommentAnnotation's data\n                    angular.merge(autoCommentAnnotation.data, annotationGroupForScore);\n                  }\n                }\n                componentState.annotations.push(autoCommentAnnotation);\n\n                if (this.mode === 'authoring') {\n                  if (this.latestAnnotations == null) {\n                    this.latestAnnotations = {};\n                  }\n\n                  /*\n                   * we are in the authoring view so we will set the\n                   * latest comment annotation manually\n                   */\n                  this.latestAnnotations.comment = autoCommentAnnotation;\n                }\n              }\n              if (this.componentContent.enableNotifications) {\n                // get the notification properties for the score that the student got.\n                let notificationForScore = this.ProjectService.getNotificationByScore(this.componentContent, previousScore, score);\n\n                if (notificationForScore != null) {\n                  notificationForScore.score = score;\n                  notificationForScore.nodeId = this.nodeId;\n                  notificationForScore.componentId = this.componentId;\n                  this.NotificationService.sendNotificationForScore(notificationForScore);\n                }\n              }\n\n              // display global annotations dialog if needed\n              if (this.componentContent.enableGlobalAnnotations && annotationGroupForScore != null && annotationGroupForScore.isGlobal && annotationGroupForScore.isPopup) {\n                this.$scope.$emit('displayGlobalAnnotations');\n              }\n            }\n          }\n        }\n\n        /*\n         * hide the dialog that tells the student to wait since\n         * the work has been scored.\n         */\n        this.$mdDialog.hide();\n\n        // resolve the promise now that we are done performing additional processing\n        deferred.resolve(componentState);\n      });\n    } else if (this.ProjectService.hasAdditionalProcessingFunctions(this.nodeId, this.componentId)) {\n      // if there are any additionalProcessingFunctions for this node and component, call all of them\n      let additionalProcessingFunctions = this.ProjectService.getAdditionalProcessingFunctions(this.nodeId, this.componentId);\n      let allPromises = [];\n      for (let i = 0; i < additionalProcessingFunctions.length; i++) {\n        let additionalProcessingFunction = additionalProcessingFunctions[i];\n        let defer = this.$q.defer();\n        let promise = defer.promise;\n        allPromises.push(promise);\n        additionalProcessingFunction(defer, componentState, action);\n      }\n      this.$q.all(allPromises).then(() => {\n        deferred.resolve(componentState);\n      });\n    } else {\n      /*\n       * we don't need to perform any additional processing so we can resolve\n       * the promise immediately\n       */\n      deferred.resolve(componentState);\n    }\n  }\n\n  /**\n   * Create an auto score annotation\n   * @param runId the run id\n   * @param periodId the period id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param toWorkgroupId the student workgroup id\n   * @param data the annotation data\n   * @returns the auto score annotation\n   */\n  createAutoScoreAnnotation(data) {\n\n    var runId = this.ConfigService.getRunId();\n    var periodId = this.ConfigService.getPeriodId();\n    var nodeId = this.nodeId;\n    var componentId = this.componentId;\n    var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n    // create the auto score annotation\n    var annotation = this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n    return annotation;\n  }\n\n  /**\n   * Create an auto comment annotation\n   * @param runId the run id\n   * @param periodId the period id\n   * @param nodeId the node id\n   * @param componentId the component id\n   * @param toWorkgroupId the student workgroup id\n   * @param data the annotation data\n   * @returns the auto comment annotation\n   */\n  createAutoCommentAnnotation(data) {\n\n    var runId = this.ConfigService.getRunId();\n    var periodId = this.ConfigService.getPeriodId();\n    var nodeId = this.nodeId;\n    var componentId = this.componentId;\n    var toWorkgroupId = this.ConfigService.getWorkgroupId();\n\n    // create the auto comment annotation\n    var annotation = this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n\n    return annotation;\n  }\n\n  /**\n   * Get the number of rows for the textarea\n   */\n  getNumRows() {\n    var numRows = null;\n\n    if (this.componentContent != null) {\n      numRows = this.componentContent.numRows;\n    }\n\n    return numRows;\n  };\n\n  /**\n   * Get the number of columns for the textarea\n   */\n  getNumColumns() {\n    var numColumns = null;\n\n    if (this.componentContent != null) {\n      numColumns = this.componentContent.numColumns;\n    }\n\n    return numColumns;\n  };\n\n  /**\n   * Get the text the student typed\n   */\n  getResponse() {\n    var response = null;\n\n    if (this.studentResponse != null) {\n      response = this.studentResponse;\n    }\n\n    return response;\n  };\n\n  snipButtonClicked($event) {\n    if (this.isDirty) {\n      const deregisterListener = this.$scope.$on('studentWorkSavedToServer',\n        (event, args) => {\n          let componentState = args.studentWork;\n          if (componentState &&\n              this.nodeId === componentState.nodeId &&\n              this.componentId === componentState.componentId) {\n            const imageObject = null;\n            const noteText = componentState.studentData.response;\n            const isEditTextEnabled = false;\n            const isFileUploadEnabled = false;\n            this.NotebookService.addNote($event, imageObject, noteText, [ componentState.id ], isEditTextEnabled, isFileUploadEnabled);\n            deregisterListener();\n          }\n        }\n      );\n      this.saveButtonClicked(); // trigger a save\n    } else {\n      const studentWork =\n        this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(this.nodeId, this.componentId);\n      const imageObject = null;\n      const noteText = studentWork.studentData.response;\n      const isEditTextEnabled = false;\n      const isFileUploadEnabled = false;\n      this.NotebookService.addNote($event, imageObject, noteText, [ studentWork.id ], isEditTextEnabled, isFileUploadEnabled);\n    }\n  }\n\n  /**\n   * Check if CRater is enabled for this component\n   * @returns whether CRater is enabled for this component\n   */\n  isCRaterEnabled() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterEnabled(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score on save\n   * @returns whether CRater is set to score on save\n   */\n  isCRaterScoreOnSave() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnSave(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score on submit\n   * @returns whether CRater is set to score on submit\n   */\n  isCRaterScoreOnSubmit() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnSubmit(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score on change\n   * @returns whether CRater is set to score on change\n   */\n  isCRaterScoreOnChange() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnChange(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Check if CRater is set to score when the student exits the step\n   * @returns whether CRater is set to score when the student exits the step\n   */\n  isCRaterScoreOnExit() {\n    var result = false;\n\n    if (this.CRaterService.isCRaterScoreOnExit(this.componentContent)) {\n      result = true;\n    }\n\n    return result;\n  }\n\n  /**\n   * Returns all the revisions made by this user for the specified component\n   */\n  getRevisions() {\n    // get the component states for this component\n    return this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n  };\n\n  /**\n   * Create a component state with the merged student responses\n   * @param componentStates an array of component states\n   * @return a component state with the merged student responses\n   */\n  createMergedComponentState(componentStates) {\n\n    // create a new component state\n    let mergedComponentState = this.NodeService.createNewComponentState();\n\n    if (componentStates != null) {\n\n      let mergedResponse = '';\n\n      // loop through all the component state\n      for (let c = 0; c < componentStates.length; c++) {\n        let componentState = componentStates[c];\n\n        if (componentState != null) {\n          let studentData = componentState.studentData;\n\n          if (studentData != null) {\n\n            // get the student response\n            let response = studentData.response;\n\n            if (response != null && response != '') {\n              if (mergedResponse != '') {\n                // add a new line between the responses\n                mergedResponse += '\\n';\n              }\n\n              // append the response\n              mergedResponse += response;\n            }\n          }\n        }\n      }\n\n      if (mergedResponse != null && mergedResponse != '') {\n        // set the merged response into the merged component state\n        mergedComponentState.studentData = {};\n        mergedComponentState.studentData.response = mergedResponse;\n      }\n    }\n\n    return mergedComponentState;\n  }\n};\n\nOpenResponseController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  'AnnotationService',\n  'ConfigService',\n  'CRaterService',\n  'NodeService',\n  'NotebookService',\n  'NotificationService',\n  'OpenResponseService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default OpenResponseController;\n"]}