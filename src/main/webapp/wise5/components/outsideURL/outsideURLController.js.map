{"version":3,"sources":["outsideURLController.es6"],"names":["OutsideURLController","$filter","$mdDialog","$q","$rootScope","$sce","$scope","AnnotationService","ConfigService","NodeService","NotebookService","OutsideURLService","ProjectService","StudentAssetService","StudentDataService","UtilService","url","maxWidth","maxHeight","componentContent","setURL","getComponentState","deferred","defer","resolve","promise","bind","$broadcast","nodeId","componentId","trustedURL","trustAsResourceUrl","ComponentController","$inject"],"mappings":"AAAA;;;;;;;;AAEA;;;;;;;;;;;;IAEMA,oB;;;AACJ,gCAAYC,OAAZ,EACIC,SADJ,EAEIC,EAFJ,EAGIC,UAHJ,EAIIC,IAJJ,EAKIC,MALJ,EAMIC,iBANJ,EAOIC,aAPJ,EAQIC,WARJ,EASIC,eATJ,EAUIC,iBAVJ,EAWIC,cAXJ,EAYIC,mBAZJ,EAaIC,kBAbJ,EAcIC,WAdJ,EAciB;AAAA;;AAAA,4IACTd,OADS,EACAC,SADA,EACWE,UADX,EACuBE,MADvB,EAEXC,iBAFW,EAEQC,aAFR,EAEuBC,WAFvB,EAGXC,eAHW,EAGME,cAHN,EAGsBC,mBAHtB,EAIXC,kBAJW,EAISC,WAJT;;AAKf,UAAKZ,EAAL,GAAUA,EAAV;AACA,UAAKE,IAAL,GAAYA,IAAZ;AACA,UAAKM,iBAAL,GAAyBA,iBAAzB;;AAEA;AACA,UAAKK,GAAL,GAAW,IAAX;;AAEA;AACA,UAAKC,QAAL,GAAgB,IAAhB;;AAEA;AACA,UAAKC,SAAL,GAAiB,IAAjB;;AAEA,QAAI,MAAKC,gBAAL,IAAyB,IAA7B,EAAmC;AACjC;AACA,YAAKC,MAAL,CAAY,MAAKD,gBAAL,CAAsBH,GAAlC;AACD;;AAED;AACA,UAAKC,QAAL,GAAgB,MAAKE,gBAAL,CAAsBF,QAAtB,GAAiC,MAAKE,gBAAL,CAAsBF,QAAvD,GAAkE,MAAlF;;AAEA;AACA,UAAKC,SAAL,GAAiB,MAAKC,gBAAL,CAAsBD,SAAtB,GAAkC,MAAKC,gBAAL,CAAsBD,SAAxD,GAAoE,MAArF;;AAEA;;;;;;AAMA,UAAKZ,MAAL,CAAYe,iBAAZ,GAAgC,YAAW;AACzC,UAAIC,WAAW,KAAKnB,EAAL,CAAQoB,KAAR,EAAf;;AAEA;;;;;AAKAD,eAASE,OAAT;;AAEA,aAAOF,SAASG,OAAhB;AACD,KAX+B,CAW9BC,IAX8B,OAAhC;;AAaA,UAAKtB,UAAL,CAAgBuB,UAAhB,CAA2B,wBAA3B,EAAqD,EAAEC,QAAQ,MAAKA,MAAf,EAAuBC,aAAa,MAAKA,WAAzC,EAArD;AAhDe;AAiDhB;;AAED;;;;;;;;2BAIOb,G,EAAK;AACV,UAAIA,OAAO,IAAX,EAAiB;AACf,YAAIc,aAAa,KAAKzB,IAAL,CAAU0B,kBAAV,CAA6Bf,GAA7B,CAAjB;AACA,aAAKA,GAAL,GAAWc,UAAX;AACD;AACF;;;;EA3EgCE,6B;;AA8EnChC,qBAAqBiC,OAArB,GAA+B,CAC7B,SAD6B,EAE7B,WAF6B,EAG7B,IAH6B,EAI7B,YAJ6B,EAK7B,MAL6B,EAM7B,QAN6B,EAO7B,mBAP6B,EAQ7B,eAR6B,EAS7B,aAT6B,EAU7B,iBAV6B,EAW7B,mBAX6B,EAY7B,gBAZ6B,EAa7B,qBAb6B,EAc7B,oBAd6B,EAe7B,aAf6B,CAA/B;;kBAkBejC,oB","file":"outsideURLController.js","sourcesContent":["'use strict';\n\nimport ComponentController from \"../componentController\";\n\nclass OutsideURLController extends ComponentController {\n  constructor($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $sce,\n      $scope,\n      AnnotationService,\n      ConfigService,\n      NodeService,\n      NotebookService,\n      OutsideURLService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$q = $q;\n    this.$sce = $sce;\n    this.OutsideURLService = OutsideURLService;\n\n    // the url to the web page to display\n    this.url = null;\n\n    // the max width of the iframe\n    this.maxWidth = null;\n\n    // the max height of the iframe\n    this.maxHeight = null;\n\n    if (this.componentContent != null) {\n      // set the url\n      this.setURL(this.componentContent.url);\n    }\n\n    // get the max width\n    this.maxWidth = this.componentContent.maxWidth ? this.componentContent.maxWidth : 'none';\n\n    // get the max height\n    this.maxHeight = this.componentContent.maxHeight ? this.componentContent.maxHeight : 'none';\n\n    /**\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @return a promise of a component state containing the student data\n     */\n    this.$scope.getComponentState = function() {\n      var deferred = this.$q.defer();\n\n      /*\n       * the student does not have any unsaved changes in this component\n       * so we don't need to save a component state for this component.\n       * we will immediately resolve the promise here.\n       */\n      deferred.resolve();\n\n      return deferred.promise;\n    }.bind(this);\n\n    this.$rootScope.$broadcast('doneRenderingComponent', { nodeId: this.nodeId, componentId: this.componentId });\n  }\n\n  /**\n   * Set the url\n   * @param url the url\n   */\n  setURL(url) {\n    if (url != null) {\n      var trustedURL = this.$sce.trustAsResourceUrl(url);\n      this.url = trustedURL;\n    }\n  };\n}\n\nOutsideURLController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$sce',\n  '$scope',\n  'AnnotationService',\n  'ConfigService',\n  'NodeService',\n  'NotebookService',\n  'OutsideURLService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default OutsideURLController;\n"]}