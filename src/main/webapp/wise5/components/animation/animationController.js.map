{"version":3,"sources":["animationController.es6"],"names":["AnimationController","$filter","$mdDialog","$q","$rootScope","$scope","$timeout","AnimationService","AnnotationService","ConfigService","NodeService","NotebookService","NotificationService","ProjectService","StudentAssetService","StudentDataService","UtilService","width","height","pixelsPerXUnit","pixelsPerYUnit","dataXOriginInPixels","dataYOriginInPixels","idToSVGObject","idToWhetherAuthoredObjectIsAnimating","componentState","svgId","nodeId","componentId","setAnimationStateToStopped","setCoordinateSystemToScreen","setSpeed","initializeCoordinates","isStudentMode","isPromptVisible","isSaveButtonVisible","componentContent","showSaveButton","isSubmitButtonVisible","showSubmitButton","isGradingMode","id","workgroupId","isDisabled","hasShowWorkConnectedComponent","handleConnectedComponents","componentStateHasStudentWork","setStudentWork","hasConnectedComponent","hasStudentUsedAllSubmits","disableSubmitButton","disableComponentIfNecessary","setupSVGAfterTimeout","isDirty","animationController","getComponentState","isSubmit","deferred","defer","hasDirtyWorkToSendToParent","action","getDirtyWorkToSendToParentAction","createComponentState","then","resolve","promise","handleConnectedComponentStudentDataChanged","connectedComponent","connectedComponentParams","type","updateObjectDatasFromDataSourceComponentState","broadcastDoneRenderingComponent","state","animationState","setAnimationState","coordinateSystem","setCoordinateSystem","maxSubmitCount","submitCounter","isSubmitButtonDisabled","isSubmitDirty","submit","widthInPixels","widthInUnits","heightInPixels","heightInUnits","setupSVG","draw","SVG","createSVGObjects","updateObjectDatasFromDataSources","objects","object","svgObject","createSVGImage","image","createSVGText","text","addIdToSVGObject","addIdToWhetherAuthoredObjectIsAnimating","initializeObjectPosition","isAnimating","load","x","y","authoredObject","getPixelXForAuthoredObject","getPixelYForAuthoredObject","isUsingCartesianCoordinateSystem","convertToCartesianCoordinateSystem","getSVGObject","setPositionOfSVGObject","authoredObjectHasData","data","hasDataPointAtTimeZero","firstDataPoint","setPositionFromDataPoint","dataX","pixelX","dataXToPixelX","dataY","pixelY","dataYToPixelY","t","dataPoint","dataPointX","dataPointY","dataPointXInPixels","setXPositionOfSVGObject","dataPointYInPixels","setYPositionOfSVGObject","attr","initializeObjectImages","initializeObjectPositions","animateObject","time","timerText","initializeTimerText","setTimerText","getTimerTextX","setTimerPosition","fill","authoredObjectHasDataSource","updateObjectDataFromDataSource","dataSource","getLatestComponentStateByNodeIdAndComponentId","componentType","setDataFromGraphComponentState","setDataFromTableComponentState","isComponentStateFromDataSource","updateObjectDataFromDataSourceComponentState","getDataFromDataSourceComponentState","trialIndex","seriesIndex","tColumnIndex","xColumnIndex","yColumnIndex","trial","getTrialFromComponentState","singleSeries","getSeriesFromTrial","seriesData","getDataFromSeries","convertSeriesDataToAnimationData","studentData","trials","series","seriesDataPoint","animationDataPoint","push","d","length","currentDataPoint","nextDataPoint","xPixel","yPixel","isFirstDataPoint","setInitialPositionOfSVGObject","updateImageOfSVGObject","isLastDataPoint","nextT","nextXPixel","nextYPixel","tDiff","calculateTimeDiff","updatePositionOfSVGObject","animationCompletedPostProcessing","thisAnimationController","animate","millisecondsPerDataTime","during","pos","morph","eased","situation","totalElapsedTime","displayAndBroadcastTime","after","move","afterAll","checkIfAllAnimatingIsDone","updateSVGObjectImage","dynamicallyCalculatedImage","getImageBasedOnMovement","currentTime","futureTime","displayTime","truncateToOneDecimalPlace","showTimeInSVG","isPerformBroadcast","broadcastTime","lastBroadcastTime","timeInSeconds","parseInt","Date","getTime","$emit","isYDataPointSame","isXDataPointSame","getImageMovingInX","getImageMovingInY","getImageMovingRight","getImageMovingLeft","getImageMovingUp","getImageMovingDown","imageMovingUp","imageMovingDown","imageMovingLeft","imageMovingRight","areAnyObjectsAnimating","$digest","processLatestStudentWork","numberOfSubmitsLeft","isPerformSubmit","alert","$translate","confirm","setIsDirtyTrue","emitComponentDirty","setIsSubmitDirty","emitComponentSubmitDirty","clearSaveText","createNewComponentState","getIsSubmit","setIsSubmit","createComponentStateAdditionalProcessing","runId","getRunId","periodId","getPeriodId","toWorkgroupId","getWorkgroupId","createAutoScoreAnnotation","createAutoCommentAnnotation","getComponentStatesByNodeIdAndComponentId","setAnimationStateToPlaying","startAnimation","setAnimationStateToPaused","pause","play","jumpToEnd","clearQueue","stop","speedSliderValue","resetButtonClicked","getComponentByNodeIdAndComponentId","ComponentController","$inject"],"mappings":"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","file":"animationController.js","sourcesContent":["'use strict';\n\nimport ComponentController from '../componentController';\nimport 'svg.js';\n\nclass AnimationController extends ComponentController {\n  constructor($filter,\n      $mdDialog,\n      $q,\n      $rootScope,\n      $scope,\n      $timeout,\n      AnimationService,\n      AnnotationService,\n      ConfigService,\n      NodeService,\n      NotebookService,\n      NotificationService,\n      ProjectService,\n      StudentAssetService,\n      StudentDataService,\n      UtilService) {\n    super($filter, $mdDialog, $rootScope, $scope,\n        AnnotationService, ConfigService, NodeService,\n        NotebookService, ProjectService, StudentAssetService,\n        StudentDataService, UtilService);\n    this.$q = $q;\n    this.$timeout = $timeout;\n    this.AnimationService = AnimationService;\n    this.NotificationService = NotificationService;\n\n    this.width = 800;\n    this.height = 600;\n    this.pixelsPerXUnit = 1;\n    this.pixelsPerYUnit = 1;\n    this.dataXOriginInPixels = 0;\n    this.dataYOriginInPixels = 0;\n    this.idToSVGObject = {};\n    this.idToWhetherAuthoredObjectIsAnimating = {};\n    const componentState = this.$scope.componentState;\n    this.svgId = 'svg_' + this.nodeId + '_' + this.componentId;\n    this.setAnimationStateToStopped();\n    this.setCoordinateSystemToScreen();\n    this.setSpeed(3);\n    this.initializeCoordinates();\n\n    if (this.isStudentMode()) {\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = this.componentContent.showSaveButton;\n      this.isSubmitButtonVisible = this.componentContent.showSubmitButton;\n    } else if (this.isGradingMode()) {\n      if (componentState != null) {\n        this.svgId = 'svg_' + this.nodeId + '_' + this.componentId + '_' + componentState.id;\n      } else {\n        this.svgId = 'svg_' + this.nodeId + '_' + this.componentId + '_' + this.workgroupId;\n      }\n\n      this.isPromptVisible = true;\n      this.isSaveButtonVisible = false;\n      this.isSubmitButtonVisible = false;\n      this.isDisabled = true;\n    }\n\n    if (this.isStudentMode()) {\n      if (this.UtilService.hasShowWorkConnectedComponent(this.componentContent)) {\n        this.handleConnectedComponents();\n      }  else if (this.AnimationService.componentStateHasStudentWork(componentState, this.componentContent)) {\n        this.setStudentWork(componentState);\n      } else if (this.UtilService.hasConnectedComponent(this.componentContent)) {\n        this.handleConnectedComponents();\n      }\n    } else {\n      if (componentState != null) {\n        this.setStudentWork(componentState);\n      }\n    }\n\n    if (this.hasStudentUsedAllSubmits()) {\n      this.disableSubmitButton();\n    }\n\n    this.disableComponentIfNecessary();\n\n    this.setupSVGAfterTimeout();\n\n    this.$scope.isDirty = () => {\n      return this.$scope.animationController.isDirty;\n    };\n\n    /*\n     * Get the component state from this component. The parent node will\n     * call this function to obtain the component state when it needs to\n     * save student data.\n     * @param {boolean} isSubmit boolean whether the request is coming from a submit\n     * action (optional; default is false)\n     * @return {promise} a promise of a component state containing the student data\n     */\n    this.$scope.getComponentState = (isSubmit) => {\n      const deferred = this.$q.defer();\n      if (this.hasDirtyWorkToSendToParent(isSubmit)) {\n        const action = this.getDirtyWorkToSendToParentAction(isSubmit);\n        this.$scope.animationController.createComponentState(action).then((componentState) => {\n          deferred.resolve(componentState);\n        });\n      } else {\n        deferred.resolve();\n      }\n      return deferred.promise;\n    };\n\n    /**\n     * A connected component has changed its student data so we will\n     * perform any necessary changes to this component.\n     * @param {object} connectedComponent The connected component content.\n     * @param {object} connectedComponentParams The params to determine what to\n     * do with the connected component data such as 'importWork' or 'showWork'.\n     * @param {object} componentState The student data from the connected\n     * component that has changed.\n     */\n    this.$scope.handleConnectedComponentStudentDataChanged = (connectedComponent, connectedComponentParams, componentState) => {\n      if (connectedComponent.type === 'Graph') {\n        this.updateObjectDatasFromDataSourceComponentState(componentState);\n      }\n    };\n\n    this.broadcastDoneRenderingComponent();\n  }\n\n  setAnimationState(state) {\n    this.animationState = state;\n  }\n\n  setAnimationStateToPlaying() {\n    this.setAnimationState('playing');\n  }\n\n  setAnimationStateToPaused() {\n    this.setAnimationState('paused');\n  }\n\n  setAnimationStateToStopped() {\n    this.setAnimationState('stopped');\n  }\n\n  setCoordinateSystem(coordinateSystem) {\n    this.coordinateSystem = coordinateSystem;\n  }\n\n  setCoordinateSystemToScreen() {\n    this.setCoordinateSystem('screen');\n  }\n\n  setCoordinateSystemToCartesian() {\n    this.setCoordinateSystem('cartesian');\n  }\n\n  hasStudentUsedAllSubmits() {\n    return this.componentContent.maxSubmitCount != null &&\n      this.submitCounter >= this.componentContent.maxSubmitCount;\n  }\n\n  disableSubmitButton() {\n    this.isSubmitButtonDisabled = true;\n  }\n\n  hasDirtyWorkToSendToParent(isSubmit) {\n    return (isSubmit && this.$scope.animationController.isSubmitDirty) ||\n        this.$scope.animationController.isDirty;\n  }\n\n  getDirtyWorkToSendToParentAction(isSubmit) {\n    let action = 'change';\n    if (isSubmit && this.$scope.animationController.isSubmitDirty) {\n      action = 'submit';\n    } else if (this.$scope.animationController.isDirty) {\n      action = 'save';\n    }\n    return action;\n  }\n\n  handleNodeSubmit() {\n    this.submit('nodeSubmitButton');\n  }\n\n  initializeCoordinates() {\n    if (this.componentContent.widthInPixels != null &&\n        this.componentContent.widthInPixels != '') {\n      this.width = this.componentContent.widthInPixels;\n      this.pixelsPerXUnit = this.componentContent.widthInPixels / this.componentContent.widthInUnits;\n    }\n\n    if (this.componentContent.heightInPixels != null &&\n        this.componentContent.heightInPixels != '') {\n      this.height = this.componentContent.heightInPixels;\n      this.pixelsPerYUnit = this.componentContent.heightInPixels / this.componentContent.heightInUnits;\n    }\n\n    if (this.componentContent.dataXOriginInPixels != null &&\n        this.componentContent.dataXOriginInPixels != '') {\n      this.dataXOriginInPixels = this.componentContent.dataXOriginInPixels;\n    }\n\n    if (this.componentContent.dataYOriginInPixels != null &&\n        this.componentContent.dataYOriginInPixels != '') {\n      this.dataYOriginInPixels = this.componentContent.dataYOriginInPixels;\n    }\n\n    if (this.componentContent.coordinateSystem != null &&\n        this.componentContent.coordinateSystem != '') {\n      this.coordinateSystem = this.componentContent.coordinateSystem;\n    }\n  }\n\n  /*\n   * Call the setupSVG() function after a timeout so that angular has a\n   * chance to set the svg element id before we start using it. If we\n   * don't wait for the timeout, the svg id won't be set when we try\n   * to start referencing the svg element.\n   */\n  setupSVGAfterTimeout() {\n    this.$timeout(() => { this.setupSVG() });\n  }\n\n  setupSVG() {\n    this.draw = SVG(this.svgId);\n    this.createSVGObjects();\n    this.updateObjectDatasFromDataSources();\n  }\n\n  createSVGObjects() {\n    for (let object of this.componentContent.objects) {\n      const id = object.id;\n      const type = object.type;\n      let svgObject = null;\n\n      if (type == 'image') {\n        svgObject = this.createSVGImage(object.image, object.width, object.height);\n      } else if (type == 'text') {\n        svgObject = this.createSVGText(object.text);\n      }\n\n      this.addIdToSVGObject(id, svgObject);\n      this.addIdToWhetherAuthoredObjectIsAnimating(id, false);\n      this.initializeObjectPosition(object);\n    }\n  }\n\n  createSVGImage(image, width, height) {\n    return this.draw.image(image, width, height);\n  }\n\n  createSVGText(text) {\n    if (text == null) {\n      text = '';\n    }\n    return this.draw.text(text);\n  }\n\n  addIdToSVGObject(id, svgObject) {\n    this.idToSVGObject[id] = svgObject;\n  }\n\n  addIdToWhetherAuthoredObjectIsAnimating(id, isAnimating) {\n    this.idToWhetherAuthoredObjectIsAnimating[id] = isAnimating;\n  }\n\n  initializeObjectImages() {\n    let objects = this.componentContent.objects;\n    for (let object of objects) {\n      if (object.type == 'image') {\n        const svgObject = this.idToSVGObject[object.id];\n        svgObject.load(object.image);\n      }\n    }\n  }\n\n  initializeObjectPositions() {\n    for (let object of this.componentContent.objects) {\n      this.initializeObjectPosition(object);\n    }\n  }\n\n  /**\n   * Convert a data x value to a pixel x value.\n   * @param {integer} x An x value in data units.\n   * @return {integer} The x value converted to a pixel coordinate.\n   */\n  dataXToPixelX(x) {\n    if (x == null) {\n      return this.dataXOriginInPixels;\n    } else {\n      return this.dataXOriginInPixels + (x * this.pixelsPerXUnit);\n    }\n  }\n\n  /**\n   * Convert a data y value to a pixel y value.\n   * @param {integer} y A y value in data units.\n   * @return {integer} The y value converted to a pixel coordinate.\n   */\n  dataYToPixelY(y) {\n    if (y == null) {\n      return this.dataYOriginInPixels;\n    } else {\n      return this.dataYOriginInPixels + (y * this.pixelsPerYUnit);\n    }\n  }\n\n  initializeObjectPosition(authoredObject) {\n    let x = this.getPixelXForAuthoredObject(authoredObject);\n    let y = this.getPixelYForAuthoredObject(authoredObject);\n\n    if (this.isUsingCartesianCoordinateSystem()) {\n      y = this.convertToCartesianCoordinateSystem(y);\n    }\n\n    let id = authoredObject.id;\n    let svgObject = this.getSVGObject(id);\n    this.setPositionOfSVGObject(svgObject, x, y);\n\n    if (this.authoredObjectHasData(authoredObject)) {\n      const data = authoredObject.data;\n\n      if (this.hasDataPointAtTimeZero(data)) {\n        const firstDataPoint = data[0];\n        this.setPositionFromDataPoint(svgObject, firstDataPoint);\n      }\n    }\n  }\n\n  getPixelXForAuthoredObject(authoredObject) {\n    const dataX = authoredObject.dataX;\n    const pixelX = authoredObject.pixelX;\n    let x = 0;\n    if (dataX != null) {\n      x = this.dataXToPixelX(dataX);\n    } else if (pixelX != null) {\n      x = pixelX;\n    }\n    return x;\n  }\n\n  getPixelYForAuthoredObject(authoredObject) {\n    const dataY = authoredObject.dataY;\n    const pixelY = authoredObject.pixelY;\n    let y = 0;\n    if (dataY != null) {\n      y = this.dataYToPixelY(dataY);\n    } else if (pixelY != null) {\n      y = pixelY;\n    }\n    return y;\n  }\n\n  getSVGObject(id) {\n    return this.idToSVGObject[id];\n  }\n\n  hasDataPointAtTimeZero(data) {\n    const firstDataPoint = data[0];\n    if (firstDataPoint != null && firstDataPoint.t === 0) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  setPositionFromDataPoint(svgObject, dataPoint) {\n    let dataPointX = dataPoint.x;\n    let dataPointY = dataPoint.y;\n    if (dataPointX != null && dataPointX != '' && typeof dataPointX != 'undefined') {\n      const dataPointXInPixels = this.dataXToPixelX(dataPointX);\n      this.setXPositionOfSVGObject(svgObject, dataPointXInPixels);\n    }\n\n    if (dataPointY != null && dataPointY != '' && typeof dataPointY != 'undefined') {\n      let dataPointYInPixels = this.dataYToPixelY(dataPointY);\n\n      if (this.isUsingCartesianCoordinateSystem()) {\n        dataPointYInPixels = this.convertToCartesianCoordinateSystem(dataPointYInPixels);\n      }\n\n      this.setYPositionOfSVGObject(svgObject, dataPointYInPixels);\n    }\n  }\n\n  setPositionOfSVGObject(svgObject, x, y) {\n    svgObject.attr({ x: x, y: y });\n  }\n\n  setXPositionOfSVGObject(svgObject, x) {\n    svgObject.attr('x', x);\n  }\n\n  setYPositionOfSVGObject(svgObject, y) {\n    svgObject.attr('y', y);\n  }\n\n  startAnimation() {\n    this.initializeObjectImages();\n    this.initializeObjectPositions();\n    for (let authoredObject of this.componentContent.objects) {\n      this.animateObject(authoredObject);\n    }\n  }\n\n  /**\n   * @param {integer} time\n   */\n  showTimeInSVG(time) {\n    if (this.timerText == null) {\n      this.initializeTimerText();\n    }\n\n    this.setTimerText(time + '');\n\n    const x = this.getTimerTextX(time);\n    const y = 0;\n    this.setTimerPosition(x, y);\n  }\n\n  initializeTimerText() {\n    this.timerText = this.draw.text('0').attr({ fill: '#f03' });\n  }\n\n  /**\n   * Get the x pixel coordinate based upon the number of digits of the time.\n   * @param {number} time The time in seconds.\n   * @returns {number} The x pixel coordinate.\n   */\n  getTimerTextX(time) {\n    const width = this.width;\n\n    // set the x position near the top right of the svg div\n    let x = width - 30;\n\n    if (time >= 10) {\n      // shift the text a little to the left if there are two digits\n      x = width - 38;\n    } else if (time >= 100) {\n      // shift the text a little more to the left if there are three digits\n      x = width - 46;\n    }\n    return x;\n  }\n\n  setTimerText(text) {\n    this.timerText.text(text);\n  }\n\n  /**\n   * @param {integer} x The x pixel coordinate.\n   * @param {integer} y The y pixel coordinate.\n   */\n  setTimerPosition(x, y) {\n    this.timerText.attr({ x: x, y: y });\n  }\n\n  updateObjectDatasFromDataSources() {\n    for (let object of this.componentContent.objects) {\n      if (this.authoredObjectHasDataSource(object)) {\n        this.updateObjectDataFromDataSource(object);\n      }\n    }\n  }\n\n  updateObjectDataFromDataSource(object) {\n    const dataSource = object.dataSource;\n    const componentState =\n        this.StudentDataService.getLatestComponentStateByNodeIdAndComponentId(dataSource.nodeId, dataSource.componentId);\n\n    if (componentState != null) {\n      if (componentState.componentType == 'Graph') {\n        this.setDataFromGraphComponentState(object, componentState);\n      } else if (componentState.componentType == 'Table') {\n        this.setDataFromTableComponentState(object, componentState);\n      }\n    }\n  }\n\n  updateObjectDatasFromDataSourceComponentState(componentState) {\n    for (let object of this.componentContent.objects) {\n      if (this.authoredObjectHasDataSource(object) &&\n          this.isComponentStateFromDataSource(componentState, object.dataSource)) {\n        this.updateObjectDataFromDataSourceComponentState(object, componentState);\n      }\n    }\n  }\n\n  isComponentStateFromDataSource(componentState, dataSource) {\n    if (dataSource != null &&\n      dataSource.nodeId == componentState.nodeId &&\n      dataSource.componentId == componentState.componentId) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  updateObjectDataFromDataSourceComponentState(object, componentState) {\n    if (componentState.componentType == 'Graph') {\n      this.setDataFromGraphComponentState(object, componentState);\n    }\n  }\n\n  setDataFromGraphComponentState(object, componentState) {\n    object.data = this.getDataFromDataSourceComponentState(object.dataSource, componentState);\n  }\n\n  getDataFromDataSourceComponentState(dataSource, componentState) {\n    const trialIndex = dataSource.trialIndex;\n    const seriesIndex = dataSource.seriesIndex;\n    const tColumnIndex = dataSource.tColumnIndex;\n    const xColumnIndex = dataSource.xColumnIndex;\n    const yColumnIndex = dataSource.yColumnIndex;\n\n    const trial = this.getTrialFromComponentState(componentState, trialIndex);\n    const singleSeries = this.getSeriesFromTrial(trial, seriesIndex);\n    const seriesData = this.getDataFromSeries(singleSeries);\n    return this.convertSeriesDataToAnimationData(seriesData, tColumnIndex, xColumnIndex, yColumnIndex);\n  }\n\n  getTrialFromComponentState(componentState, trialIndex) {\n    let trial = null;\n    const studentData = componentState.studentData;\n    if (studentData.trials != null) {\n      trial = studentData.trials[trialIndex];\n    }\n    return trial;\n  }\n\n  getSeriesFromTrial(trial, seriesIndex) {\n    return trial.series[seriesIndex];\n  }\n\n  getDataFromSeries(series) {\n    return series.data;\n  }\n\n  convertSeriesDataToAnimationData(seriesData, tColumnIndex, xColumnIndex, yColumnIndex) {\n    const data = [];\n\n    for (let seriesDataPoint of seriesData) {\n      let animationDataPoint = {};\n\n      if (tColumnIndex != null) {\n        animationDataPoint.t = seriesDataPoint[tColumnIndex];\n      }\n\n      if (xColumnIndex != null) {\n        animationDataPoint.x = seriesDataPoint[xColumnIndex];\n      }\n\n      if (yColumnIndex != null) {\n        animationDataPoint.y = seriesDataPoint[yColumnIndex];\n      }\n\n      data.push(animationDataPoint);\n    }\n    return data;\n  }\n\n  animateObject(authoredObject) {\n    if (this.authoredObjectHasData(authoredObject)) {\n      let id = authoredObject.id;\n      let data = authoredObject.data;\n      let svgObject = this.idToSVGObject[id];\n      let animateObject = null;\n\n      for (let d = 0; d < data.length; d++) {\n        let currentDataPoint = data[d];\n        let nextDataPoint = data[d + 1];\n        let image = currentDataPoint.image;\n        let t = currentDataPoint.t;\n        let xPixel = this.dataXToPixelX(currentDataPoint.x);\n        let yPixel = this.dataYToPixelY(currentDataPoint.y);\n        if (this.isUsingCartesianCoordinateSystem()) {\n          yPixel = this.convertToCartesianCoordinateSystem(yPixel);\n        }\n        this.idToWhetherAuthoredObjectIsAnimating[id] = true;\n\n        if (this.isFirstDataPoint(d)) {\n          animateObject = this.setInitialPositionOfSVGObject(t, svgObject, xPixel, yPixel);\n        }\n\n        animateObject = this.updateImageOfSVGObject(image, animateObject, svgObject, authoredObject, currentDataPoint, nextDataPoint);\n\n        if (!this.isLastDataPoint(data, d)) {\n          let nextT = null;\n          let nextXPixel = null;\n          let nextYPixel = null;\n\n          if (nextDataPoint != null) {\n            nextT = nextDataPoint.t;\n            nextXPixel = this.dataXToPixelX(nextDataPoint.x);\n            nextYPixel = this.dataYToPixelY(nextDataPoint.y);\n          }\n          if (this.isUsingCartesianCoordinateSystem()) {\n            nextYPixel = this.convertToCartesianCoordinateSystem(nextYPixel);\n          }\n\n          let tDiff = this.calculateTimeDiff(t, nextT);\n          animateObject = this.updatePositionOfSVGObject(svgObject, animateObject, t, tDiff, nextXPixel, nextYPixel);\n        } else {\n          this.animationCompletedPostProcessing(id, animateObject);\n        }\n      }\n    }\n  }\n\n  setInitialPositionOfSVGObject(t, svgObject, xPixel, yPixel) {\n    let animateObject = null;\n\n    if (t == 0) {\n      svgObject.attr({ x: xPixel, y: yPixel });\n    } else {\n      /*\n       * The first data point is not at time 0 so we will need to wait some time\n       * before we set the position of the object.\n       */\n      const thisAnimationController = this;\n      animateObject = svgObject.animate(t * this.millisecondsPerDataTime).during(function(pos, morph, eased, situation) {\n        let totalElapsedTime = t * pos;\n        thisAnimationController.displayAndBroadcastTime(totalElapsedTime);\n      }).after(function() {\n        this.attr({ x: xPixel, y: yPixel });\n      });\n    }\n\n    return animateObject;\n  }\n\n  updatePositionOfSVGObject(svgObject, animateObject, t, tDiff, nextXPixel, nextYPixel) {\n    // move the image to the next position in the given amount of time\n    const thisAnimationController = this;\n    return svgObject.animate(tDiff * this.millisecondsPerDataTime).move(nextXPixel, nextYPixel).during(function(pos, morph, eased, situation) {\n      let totalElapsedTime = t + (tDiff * pos);\n      thisAnimationController.displayAndBroadcastTime(totalElapsedTime);\n    });\n  }\n\n  animationCompletedPostProcessing(id, animateObject) {\n    animateObject.afterAll(() => {\n      this.idToWhetherAuthoredObjectIsAnimating[id] = false;\n      this.checkIfAllAnimatingIsDone();\n    });\n  }\n\n  updateImageOfSVGObject(image, animateObject, svgObject, authoredObject, currentDataPoint, nextDataPoint) {\n    if (image != null && image != '') {\n      this.updateSVGObjectImage(image, svgObject, animateObject);\n    } else if (nextDataPoint != null) {\n      /*\n       * There is a next data point so we will see if we can determine what\n       * image to show based upon the movement of the object.\n       */\n      let dynamicallyCalculatedImage = this.getImageBasedOnMovement(authoredObject, currentDataPoint, nextDataPoint);\n      if (dynamicallyCalculatedImage != null) {\n        this.updateSVGObjectImage(dynamicallyCalculatedImage, svgObject, animateObject);\n      }\n    }\n    return animateObject;\n  }\n\n  updateSVGObjectImage(image, svgObject, animateObject) {\n    if (animateObject == null) {\n      // change the image immediately\n      svgObject.load(image);\n    } else {\n      // change the image after all the existing animations\n      animateObject = animateObject.after(function () {\n        this.load(image);\n      });\n    }\n    return animateObject;\n  }\n\n  calculateTimeDiff(currentTime, futureTime) {\n    if (futureTime == null) {\n      return 0;\n    } else {\n      return futureTime - currentTime;\n    }\n  }\n\n  isFirstDataPoint(d) {\n    return d == 0;\n  }\n\n  isLastDataPoint(data, d) {\n    return d == (data.length - 1);\n  }\n\n  /**\n   * @param {number} t The time in seconds.\n   */\n  displayAndBroadcastTime(t) {\n    const displayTime = this.truncateToOneDecimalPlace(t);\n    this.showTimeInSVG(displayTime);\n\n    if (this.isPerformBroadcast()) {\n      this.broadcastTime(t);\n    }\n\n    if (this.lastBroadcastTime == null) {\n      this.lastBroadcastTime = currentTime;\n    }\n  }\n\n  /**\n   * @param {number} timeInSeconds\n   */\n  truncateToOneDecimalPlace(timeInSeconds) {\n    return parseInt(timeInSeconds * 10) / 10;\n  }\n\n  /**\n   * Check if we want to broadcast the time. We want to make sure we don't\n   * broadcast the time too frequently because that may slow down the student's\n   * computer significantly. We will wait 100 milliseconds before each\n   * broadcast.\n   * @returns {boolean}\n   */\n  isPerformBroadcast() {\n    let currentTime = new Date().getTime();\n\n    if (this.lastBroadcastTime == null || (currentTime - this.lastBroadcastTime) > 100) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  broadcastTime(t) {\n    const componentState = {\n      t: t\n    };\n\n    this.$scope.$emit('componentStudentDataChanged', {nodeId: this.nodeId, componentId: this.componentId, componentState: componentState});\n    this.lastBroadcastTime = new Date().getTime();\n  }\n\n  /**\n   * Get the image based upon the movement of the object.\n   * @param {object} authoredObject The object that is being moved.\n   * @param {object} currentDataPoint Contains x and y fields.\n   * @param {object} extDataPoint Contains x and y fields.\n   */\n  getImageBasedOnMovement(authoredObject, currentDataPoint, nextDataPoint) {\n    if (this.isYDataPointSame(currentDataPoint, nextDataPoint) &&\n        !this.isXDataPointSame(currentDataPoint, nextDataPoint)) {\n      return this.getImageMovingInX(authoredObject, currentDataPoint, nextDataPoint);\n    } else if (this.isXDataPointSame(currentDataPoint, nextDataPoint) &&\n        !this.isYDataPointSame(currentDataPoint, nextDataPoint)) {\n      return this.getImageMovingInY(authoredObject, currentDataPoint, nextDataPoint);\n    }\n    return null;\n  }\n\n  isXDataPointSame(currentDataPoint, nextDataPoint) {\n    return currentDataPoint.x == nextDataPoint.x;\n  }\n\n  isYDataPointSame(currentDataPoint, nextDataPoint) {\n    return currentDataPoint.y == nextDataPoint.y;\n  }\n\n  getImageMovingInX(authoredObject, currentDataPoint, nextDataPoint) {\n    if (currentDataPoint.x < nextDataPoint.x) {\n      return this.getImageMovingRight(authoredObject);\n    } else if (currentDataPoint.x > nextDataPoint.x) {\n      return this.getImageMovingLeft(authoredObject);\n    }\n    return null;\n  }\n\n  getImageMovingInY(authoredObject, currentDataPoint, nextDataPoint) {\n    if (currentDataPoint.y < nextDataPoint.y) {\n      if (this.isUsingCartesianCoordinateSystem()) {\n        return this.getImageMovingUp(authoredObject);\n      } else {\n        return this.getImageMovingDown(authoredObject);\n      }\n    } else if (currentDataPoint.y > nextDataPoint.y) {\n      if (this.isUsingCartesianCoordinateSystem()) {\n        return this.getImageMovingDown(authoredObject);\n      } else {\n        return this.getImageMovingUp(authoredObject);\n      }\n    }\n    return null;\n  }\n\n  getImageMovingUp(authoredObject) {\n    if (authoredObject.imageMovingUp != null && authoredObject.imageMovingUp != '') {\n      return authoredObject.imageMovingUp;\n    } else {\n      return null;\n    }\n  }\n\n  getImageMovingDown(authoredObject) {\n    if (authoredObject.imageMovingDown != null && authoredObject.imageMovingDown != '') {\n      return authoredObject.imageMovingDown;\n    } else {\n      return null;\n    }\n  }\n\n  getImageMovingLeft(authoredObject) {\n    if (authoredObject.imageMovingLeft != null && authoredObject.imageMovingLeft != '') {\n      return authoredObject.imageMovingLeft;\n    } else {\n      return null;\n    }\n  }\n\n  getImageMovingRight(authoredObject) {\n    if (authoredObject.imageMovingRight != null && authoredObject.imageMovingRight != '') {\n      return authoredObject.imageMovingRight;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Check if all svg objects are done animating. If there are no svg objects\n   * animating, we will set the animationState to 'stopped'.\n   */\n  checkIfAllAnimatingIsDone() {\n    if (!this.areAnyObjectsAnimating()) {\n      this.setAnimationStateToStopped();\n\n      // perform a digest after a timeout so that the buttons update\n      this.$timeout(() => {\n        this.$scope.$digest();\n      });\n    }\n  }\n\n  areAnyObjectsAnimating() {\n    for (let object of this.componentContent.objects) {\n      if (this.idToWhetherAuthoredObjectIsAnimating[object.id]) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Populate the student work into the component.\n   * @param {object} componentState The component state to populate into the component.\n   */\n  setStudentWork(componentState) {\n    const studentData = componentState.studentData;\n    if (studentData != null) {\n      const submitCounter = studentData.submitCounter;\n      if (submitCounter != null) {\n        this.submitCounter = submitCounter;\n      }\n      this.processLatestStudentWork();\n    }\n  }\n\n  confirmSubmit(numberOfSubmitsLeft) {\n    let isPerformSubmit = false;\n\n    if (numberOfSubmitsLeft <= 0) {\n      alert(this.$translate('animation.youHaveNoMoreChances'));\n    } else if (numberOfSubmitsLeft == 1) {\n      isPerformSubmit = confirm(this.$translate('animation.youHaveOneChance', {numberOfSubmitsLeft: numberOfSubmitsLeft}));\n    } else if (numberOfSubmitsLeft > 1) {\n      isPerformSubmit = confirm(this.$translate('animation.youHaveMultipleChances', {numberOfSubmitsLeft: numberOfSubmitsLeft}));\n    }\n\n    return isPerformSubmit;\n  }\n\n  studentDataChanged() {\n    this.setIsDirtyTrue(true);\n    this.emitComponentDirty(true);\n\n    this.setIsSubmitDirty(true);\n    this.emitComponentSubmitDirty(true);\n\n    this.clearSaveText();\n\n    this.createComponentState('change').then((componentState) => {\n      this.$scope.$emit('componentStudentDataChanged',\n          {nodeId: this.nodeId, componentId: this.componentId, componentState: componentState});\n    });\n  };\n\n  /**\n   * Create a new component state populated with the student data.\n   * @param {string} action The action that is triggering creating of this component state\n   * e.g. 'submit', 'save', 'change'.\n   * @return {promise} A promise that will return a component state.\n   */\n  createComponentState(action) {\n    const deferred = this.$q.defer();\n    const componentState = this.NodeService.createNewComponentState();\n    const studentData = {\n      submitCounter: this.submitCounter\n    };\n    componentState.studentData = studentData;\n    componentState.isSubmit = this.getIsSubmit();\n\n    /*\n     * Reset the isSubmit value so that the next component state\n     * doesn't maintain the same value.\n     */\n    this.setIsSubmit(false);\n\n    /*\n     * Perform any additional processing that is required before returning\n     * the component state.\n     */\n    this.createComponentStateAdditionalProcessing(deferred, componentState, action);\n\n    return deferred.promise;\n  };\n\n  /**\n   * @param {object} data The annotation data.\n   * @returns {object} The auto score annotation.\n   */\n  createAutoScoreAnnotation(data) {\n    const runId = this.ConfigService.getRunId();\n    const periodId = this.ConfigService.getPeriodId();\n    const nodeId = this.nodeId;\n    const componentId = this.componentId;\n    const toWorkgroupId = this.ConfigService.getWorkgroupId();\n    return this.AnnotationService.createAutoScoreAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n  }\n\n  /**\n   * @param {object} data The annotation data.\n   * @returns {object} The auto comment annotation.\n   */\n  createAutoCommentAnnotation(data) {\n    const runId = this.ConfigService.getRunId();\n    const periodId = this.ConfigService.getPeriodId();\n    const nodeId = this.nodeId;\n    const componentId = this.componentId;\n    const toWorkgroupId = this.ConfigService.getWorkgroupId();\n    return this.AnnotationService.createAutoCommentAnnotation(runId, periodId, nodeId, componentId, toWorkgroupId, data);\n  }\n\n  getRevisions() {\n    return this.StudentDataService.getComponentStatesByNodeIdAndComponentId(this.nodeId, this.componentId);\n  }\n\n  playButtonClicked() {\n    this.setAnimationStateToPlaying();\n    this.startAnimation();\n  }\n\n  pauseButtonClicked() {\n    this.setAnimationStateToPaused();\n    for (let object of this.componentContent.objects) {\n      let id = object.id;\n      let svgObject = this.idToSVGObject[id];\n      svgObject.pause();\n    }\n  }\n\n  resumeButtonClicked() {\n    this.setAnimationStateToPlaying();\n\n    for (let object of this.componentContent.objects) {\n      let id = object.id;\n      let svgObject = this.idToSVGObject[id];\n      /*\n       * Check if the object still needs to be animated or\n       * if it has already finished performing all of its\n       * animation. We only need to play it if it still\n       * has more animating.\n       */\n      if (this.idToWhetherAuthoredObjectIsAnimating[id]) {\n        svgObject.play();\n      }\n    }\n  }\n\n  resetButtonClicked() {\n    this.setAnimationStateToStopped();\n\n    for (let object of this.componentContent.objects) {\n      let id = object.id;\n      let svgObject = this.idToSVGObject[id];\n      let jumpToEnd = true;\n      let clearQueue = true;\n\n      /*\n       * Check if the object still needs to be animated or\n       * if it has already finished performing all of its\n       * animation. We only need to play it if it still\n       * has more animating.\n       */\n      if (this.idToWhetherAuthoredObjectIsAnimating[id]) {\n        /*\n         * We need to play it in case it is currently paused.\n         * There is a minor bug in the animation library\n         * which is caused if you pause an animation and\n         * then stop the animation. Then if you try to play the\n         * animation, the animation will not play. We avoid\n         * this problem by making sure the object animation\n         * is playing when we stop it.\n         */\n        svgObject.play();\n      }\n\n      // stop the object from animating\n      svgObject.stop(jumpToEnd, clearQueue);\n    }\n\n    this.$timeout(() => {\n      this.displayAndBroadcastTime(0);\n      this.initializeObjectImages();\n      this.initializeObjectPositions();\n    }, 100);\n  }\n\n  isUsingCartesianCoordinateSystem() {\n    return this.coordinateSystem == 'cartesian';\n  }\n\n  /**\n   * Convert the y value to the cartesian coordinate system\n   * @param {integer} y the pixel y value in the screen coordinate system\n   * @return {integer} the pixel y value in the cartesian coordinate system\n   */\n  convertToCartesianCoordinateSystem(y) {\n    return this.height - y;\n  }\n\n  speedSliderChanged() {\n    this.setSpeed(this.speedSliderValue);\n    this.resetButtonClicked();\n  }\n\n  setSpeed(speedSliderValue) {\n    this.speedSliderValue = speedSliderValue;\n    if (speedSliderValue == 1) {\n      this.millisecondsPerDataTime = 10000;\n    } else if (speedSliderValue == 2) {\n      this.millisecondsPerDataTime = 1000;\n    } else if (speedSliderValue == 3) {\n      this.millisecondsPerDataTime = 100;\n    } else if (speedSliderValue == 4) {\n      this.millisecondsPerDataTime = 10;\n    } else if (speedSliderValue == 5) {\n      this.millisecondsPerDataTime = 1;\n    }\n  }\n\n  getComponentByNodeIdAndComponentId(nodeId, componentId) {\n    return this.ProjectService.getComponentByNodeIdAndComponentId(nodeId, componentId);\n  }\n\n  authoredObjectHasData(authoredObject) {\n    return authoredObject.data != null && authoredObject.data.length > 0;\n  }\n\n  authoredObjectHasDataSource(authoredObject) {\n    return authoredObject.dataSource != null;\n  }\n};\n\nAnimationController.$inject = [\n  '$filter',\n  '$mdDialog',\n  '$q',\n  '$rootScope',\n  '$scope',\n  '$timeout',\n  'AnimationService',\n  'AnnotationService',\n  'ConfigService',\n  'NodeService',\n  'NotebookService',\n  'NotificationService',\n  'ProjectService',\n  'StudentAssetService',\n  'StudentDataService',\n  'UtilService'\n];\n\nexport default AnimationController;\n"]}