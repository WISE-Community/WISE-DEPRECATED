{"version":3,"sources":["stepTools.es6"],"names":["StepToolsController","$scope","$state","ConfigService","NodeService","ProjectService","TeacherDataService","$mdSidenav","projectId","getProjectId","nodeId","getCurrentNodeId","idToOrder","updateModel","$on","event","args","setCurrentNodeByNodeId","go","currentNodeId","prevId","nextId","isGroupNode","getPrevNodeId","getNextNodeId","then","text","getNodePositionAndTitleByNodeId","goToPrevNode","goToNextNode","$inject","StepTools","bindings","showPosition","template","controller"],"mappings":"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","file":"stepTools.js","sourcesContent":["\"use strict\";\n\nclass StepToolsController {\n  constructor(\n      $scope,\n      $state,\n      ConfigService,\n      NodeService,\n      ProjectService,\n      TeacherDataService,\n      $mdSidenav) {\n    this.$scope = $scope;\n    this.$state = $state;\n    this.ConfigService = ConfigService;\n    this.NodeService = NodeService;\n    this.ProjectService = ProjectService;\n    this.TeacherDataService = TeacherDataService;\n    this.projectId = this.ConfigService.getProjectId();\n\n    // set the current node to be selected in the drop down\n    this.nodeId = this.TeacherDataService.getCurrentNodeId();\n\n    // service objects and utility functions\n    this.idToOrder = this.ProjectService.idToOrder;\n\n    // update the current node id, previous node id, and next node id\n    this.updateModel();\n\n    this.$scope.$on('currentNodeChanged', (event, args) => {\n      /*\n       * the current node has changed so we will update the\n       * current node id, previous node id, and next node id\n       */\n      this.updateModel();\n    });\n\n    this.$scope.$on('projectChanged', (event, args) => {\n      /*\n       * the project has changed most likely because the author has\n       * added, deleted, or moved a step\n       */\n\n      // update the idToOrder mappings\n      this.idToOrder = this.ProjectService.idToOrder;\n\n      // update the current node id, previous node id, and next node id\n      this.updateModel();\n    })\n  }\n\n  /**\n   * The user has selected a new node\n   */\n  nodeIdChanged() {\n    // remember the new current node\n    this.TeacherDataService.setCurrentNodeByNodeId(this.nodeId);\n\n    // go to the authoring view for the node\n    this.$state.go('root.project.node',\n        {projectId: this.projectId, nodeId: this.nodeId});\n  }\n\n  /**\n   * update the current node id, previous node id, and next node id\n   */\n  updateModel() {\n    let currentNodeId = this.TeacherDataService.getCurrentNodeId();\n\n    // set the current node to be selected in the drop down\n    this.nodeId = currentNodeId;\n\n    if (currentNodeId == null) {\n      // the node id is null which means we are at the project level\n\n      // set the previous and next node ids to null\n      this.prevId = null;\n      this.nextId = null;\n    } else {\n      /*\n       * the node id is not null which means the current node is a group\n       * or node\n       */\n      if (!this.ProjectService.isGroupNode(currentNodeId)) {\n        // the node is a step\n\n        // set the previous node id\n        this.prevId = this.NodeService.getPrevNodeId(this.nodeId);\n\n        // set the next node id\n        this.nextId = null;\n        this.NodeService.getNextNodeId(this.nodeId).then((currentNodeId) => {\n          this.nextId = currentNodeId;\n        });\n      }\n    }\n  }\n\n  /*\n   * Get the text for the selected node\n   */\n  getSelectedText() {\n    // default to show this text if this.nodeId is null\n    let text = 'Select a step';\n    if (this.nodeId != null) {\n      // get the step number and title\n      text = this.ProjectService.getNodePositionAndTitleByNodeId(this.nodeId);\n    }\n    return text;\n  }\n\n  /**\n   * Get the step number and title\n   * @param nodeId the node id\n   * @return the step number and title\n   * example\n   * \"1.4: Explore photosynthesis\"\n   */\n  getNodePositionAndTitleByNodeId(nodeId) {\n    return this.ProjectService.getNodePositionAndTitleByNodeId(nodeId);\n  }\n\n  /**\n   * Check if a node is a group node\n   * @param nodeId the node id\n   * @return whether a node is a group node\n   */\n  isGroupNode(nodeId) {\n    return this.ProjectService.isGroupNode(nodeId);\n  }\n\n  /**\n   * Go to the previous node\n   */\n  goToPrevNode() {\n    /*\n     * Tell the NodeService to go to the previous node. This will set\n     * the new current node id into the TeacherDataService.\n     */\n    this.NodeService.goToPrevNode();\n\n    // set the current node to be selected in the drop down\n    this.nodeId = this.TeacherDataService.getCurrentNodeId();\n\n    // go to the authoring view for the node\n    this.$state.go('root.project.node',\n        {projectId: this.projectId, nodeId: this.nodeId});\n  }\n\n  /**\n   * Go to the next node\n   */\n  goToNextNode() {\n    /*\n     * Tell the NodeService to get the next node. This will return a promise\n     * that will return the next node id.\n     */\n    this.NodeService.goToNextNode().then((nodeId) => {\n      // set the current node to be selected in the drop down\n      this.nodeId = nodeId;\n\n      // go to the authoring view for the node\n      this.$state.go('root.project.node',\n          {projectId: this.projectId, nodeId: this.nodeId});\n    });\n  }\n}\n\nStepToolsController.$inject = [\n    '$scope',\n    '$state',\n    'ConfigService',\n    'NodeService',\n    'ProjectService',\n    'TeacherDataService',\n    '$mdSidenav'\n];\n\nconst StepTools = {\n  bindings: {\n    showPosition: '<'\n  },\n  template:\n  `<div layout=\"row\" layout-align=\"center center\">\n      <md-button id=\"previousNodeButton\"\n                 aria-label=\"{{ 'previousStep' | translate }}\"\n                 class=\"md-icon-button toolbar__nav\"\n                 ng-disabled=\"!$ctrl.prevId\" ng-click=\"$ctrl.goToPrevNode()\">\n          <md-icon> chevron_left </md-icon>\n          <md-tooltip md-direction=\"bottom\">{{ 'previousStep' | translate }}</md-tooltip>\n      </md-button>\n      <node-icon node-id=\"$ctrl.nodeId\" size=\"18\"></node-icon>&nbsp;\n      <md-select id=\"stepSelectMenu\" md-theme=\"default\"\n                 class=\"md-button md-no-underline toolbar__select toolbar__select--fixedwidth\"\n                 md-container-class=\"stepSelectMenuContainer\"\n                 aria-label=\"{{ 'selectAStep' | translate }}\"\n                 ng-model=\"$ctrl.nodeId\"\n                 ng-change=\"$ctrl.nodeIdChanged()\"\n                 md-selected-text=\"$ctrl.getSelectedText()\">\n          <md-option ng-repeat=\"item in $ctrl.idToOrder | toArray | orderBy : 'order'\"\n                     ng-if=\"item.order !== 0\"\n                     value=\"{{ item.$key }}\"\n                     ng-class=\"{'node-select-option--group': $ctrl.isGroupNode(item.$key), 'node-select-option--node': !$ctrl.isGroupNode(item.$key)}\">\n              <div layout=\"row\" layout-align=\"start center\">\n                  <node-icon node-id=\"item.$key\" size=\"18\" custom-class=\"'node-select__icon'\"></node-icon>\n                  <span class=\"node-select__text\">{{ $ctrl.getNodePositionAndTitleByNodeId(item.$key) }}</span>\n              </div>\n          </md-option>\n      </md-select>\n      <md-button id=\"nextNodeButton\"\n                 aria-label=\"{{ 'nextStep' | translate }}\"\n                 class=\"md-icon-button toolbar__nav\"\n                 ng-disabled=\"!$ctrl.nextId\" ng-click=\"$ctrl.goToNextNode()\">\n          <md-icon> chevron_right </md-icon>\n          <md-tooltip md-direction=\"bottom\">{{ 'nextStep' | translate }}</md-tooltip>\n      </md-button>\n  </div>`,\n  controller: StepToolsController\n};\n\nexport default StepTools;\n"]}