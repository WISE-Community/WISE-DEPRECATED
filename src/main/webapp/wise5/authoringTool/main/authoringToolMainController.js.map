{"version":3,"sources":["authoringToolMainController.es6"],"names":["AuthoringToolMainController","$anchorScroll","$filter","$rootScope","$state","$timeout","ConfigService","ProjectService","TeacherDataService","UtilService","$translate","projects","getConfigParam","sharedProjects","showCreateProjectView","inProcessOfCreatingProject","showCreatingProjectMessage","showErrorCreatingProjectMessage","$on","saveEvent","projectId","project","id","sharedProject","getProjectByProjectId","projectName","name","projectInfo","projectRunId","runId","doCopyConfirmMessage","confirm","copyProject","then","retrieveConfig","window","configURL","scrollToTopOfPage","highlightDuration","temporarilyHighlightElement","getNewProjectTemplate","createGroupTitleInput","document","getElementById","focus","projectTitle","metadata","title","alert","isInProcessOfCreatingProject","turnOnInProcessOfCreatingProject","turnOnCreatingProjectMessage","startErrorCreatingProjectTimeout","projectJSONString","angular","toJson","commitMessage","Date","getTime","registerNewProject","cancelErrorCreatingProjectTimeout","go","catch","turnOffInProcessOfCreatingProject","turnOnErrorCreatingProjectMessage","errorCreatingProjectTimeout","cancel","clearAllCreatingProjectMessages","data","constraints","open","getWISEBaseURL","location","eventName","category","context","nodeId","componentId","componentType","$inject"],"mappings":"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","file":"authoringToolMainController.js","sourcesContent":["'use strict';\n\nclass AuthoringToolMainController {\n\n  constructor(\n      $anchorScroll,\n      $filter,\n      $rootScope,\n      $state,\n      $timeout,\n      ConfigService,\n      ProjectService,\n      TeacherDataService,\n      UtilService) {\n    this.$anchorScroll = $anchorScroll;\n    this.$filter = $filter;\n    this.$rootScope = $rootScope;\n    this.$state = $state;\n    this.$timeout = $timeout;\n    this.ConfigService = ConfigService;\n    this.ProjectService = ProjectService;\n    this.TeacherDataService = TeacherDataService;\n    this.UtilService = UtilService;\n\n    this.$translate = this.$filter('translate');\n    this.projects = this.ConfigService.getConfigParam('projects');\n    this.sharedProjects = this.ConfigService.getConfigParam('sharedProjects');\n    this.showCreateProjectView = false;\n    this.inProcessOfCreatingProject = false;\n    this.showCreatingProjectMessage = false;\n    this.showErrorCreatingProjectMessage = false;\n\n    this.$rootScope.$on('goHome', () => {\n      this.saveEvent('goToTeacherHome', 'Navigation', null, null);\n    });\n    this.$rootScope.$on('logOut', () => {\n      this.saveEvent('logOut', 'Navigation', null, null);\n    });\n  }\n\n  /**\n   * Get my project or shared project by project id\n   * @param projectId the project id\n   * @return the project object that just contains the name and id and run id\n   * if it is associated with a run. If none were found, return null.\n   */\n  getProjectByProjectId(projectId) {\n    for (let project of this.projects) {\n      if (project != null && project.id == projectId) {\n        return project;\n      }\n    }\n\n    for (let sharedProject of this.sharedProjects) {\n      if (sharedProject != null && sharedProject.id == projectId) {\n        return sharedProject;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Copy a project after confirming and highlight it to draw attention to it\n   * @param projectId the project to copy\n   */\n  copyProject(projectId) {\n    let project = this.getProjectByProjectId(projectId);\n    let projectName = project.name;\n\n    // get the project info that we will display in the confirm message\n    let projectInfo = projectId + ' ' + projectName;\n    let projectRunId = project.runId;\n    if (projectRunId != null) {\n      projectInfo += ' (Run ID: ' + projectRunId + ')';\n    }\n\n    /*\n     * the message that we will use to confirm that the author wants to copy\n     * the project\n     */\n    let doCopyConfirmMessage =\n        this.$translate('areYouSureYouWantToCopyThisProject') +\n        '\\n\\n' + projectInfo;\n    if (confirm(doCopyConfirmMessage)) {\n      this.ProjectService.copyProject(projectId).then((projectId) => {\n        this.saveEvent('projectCopied', 'Authoring', null, projectId);\n\n        // refresh the project list and highlight the newly copied project\n        this.ConfigService.retrieveConfig(window.configURL).then(() => {\n          this.projects = this.ConfigService.getConfigParam('projects');\n          this.scrollToTopOfPage();\n          // the timeout is necessary for new element to appear on the page\n          this.$timeout(() => {\n            let highlightDuration = 3000;\n            this.UtilService.temporarilyHighlightElement(projectId, highlightDuration);\n          });\n        });\n      });\n    }\n  }\n\n  createNewProjectButtonClicked() {\n    this.project = this.ProjectService.getNewProjectTemplate();\n    this.showCreateProjectView = true;\n\n    // focus on the newProjectTitle input element\n    this.$timeout(() => {\n      let createGroupTitleInput = document.getElementById('newProjectTitle');\n      if (createGroupTitleInput != null) {\n        createGroupTitleInput.focus();\n      }\n    });\n  }\n\n  /**\n   * Create a new project and open it\n   */\n  registerNewProject() {\n    let projectTitle = this.project.metadata.title;\n    if (projectTitle == null || projectTitle == '') {\n      alert(this.$translate('pleaseEnterAProjectTitleForYourNewProject'));\n    } else {\n      /*\n       * Make sure we are not already in the process of creating a project.\n       * This is used to make sure the author does not inadvertently click\n       * the register button twice which can lead to problems in the back\n       * end.\n       */\n      if (!this.isInProcessOfCreatingProject()) {\n        this.turnOnInProcessOfCreatingProject();\n        this.turnOnCreatingProjectMessage();\n        this.startErrorCreatingProjectTimeout();\n        let projectJSONString = angular.toJson(this.project, 4);\n        let commitMessage =\n            this.$translate('projectCreatedOn') + new Date().getTime();\n        this.ProjectService.registerNewProject(projectJSONString, commitMessage)\n            .then((projectId) => {\n              this.cancelErrorCreatingProjectTimeout();\n              this.saveEvent('projectCreated', 'Authoring', null, projectId);\n              this.$state.go('root.project', {projectId: projectId});\n            }).catch(() => {\n              this.turnOffInProcessOfCreatingProject();\n              this.turnOnErrorCreatingProjectMessage();\n              this.cancelErrorCreatingProjectTimeout();\n            });\n      }\n    }\n  }\n\n  turnOnInProcessOfCreatingProject() {\n    this.inProcessOfCreatingProject = true;\n  }\n\n  turnOffInProcessOfCreatingProject() {\n    this.inProcessOfCreatingProject = false;\n  }\n\n  /**\n   * @returns {boolean} Whether we have made a request to the server to create\n   * a project and are now waiting for a response.\n   */\n  isInProcessOfCreatingProject() {\n    return this.inProcessOfCreatingProject;\n  }\n\n  /**\n   * Show the message that says \"Creating Project...\" after the author clicks\n   * the \"Create\" button that makes the request to create the project on the\n   * server.\n   */\n  turnOnCreatingProjectMessage() {\n    this.showCreatingProjectMessage = true;\n    this.showErrorCreatingProjectMessage = false;\n  }\n\n  /**\n   * Show the message that says \"Error Creating Project\".\n   */\n  turnOnErrorCreatingProjectMessage() {\n    this.showCreatingProjectMessage = false;\n    this.showErrorCreatingProjectMessage = true;\n  }\n\n  /**\n   * Hide the messages that say \"Creating Project...\" and \"Error Creating Project\".\n   */\n  clearAllCreatingProjectMessages() {\n    this.showCreatingProjectMessage = false;\n    this.showErrorCreatingProjectMessage = false;\n  }\n\n  /**\n   * Create a timeout to display the \"Error Creating Project\" message in case\n   * an error occurs and the server does not respond.\n   */\n  startErrorCreatingProjectTimeout() {\n    this.errorCreatingProjectTimeout = this.$timeout(() => {\n      this.turnOffInProcessOfCreatingProject();\n      this.turnOnErrorCreatingProjectMessage();\n    }, 10000);\n  }\n\n  /**\n   * Cancel the timeout for displaying the \"Error Creating Project\" message.\n   */\n  cancelErrorCreatingProjectTimeout() {\n    this.$timeout.cancel(this.errorCreatingProjectTimeout);\n  }\n\n  cancelRegisterNewProject() {\n    // clear the project template\n    this.project = null;\n    this.showCreateProjectView = false;\n    this.clearAllCreatingProjectMessages();\n  }\n\n  /**\n   * Open a project in the authoring tool, replacing any current view\n   * @param projectId the project id to open\n   */\n  openProject(projectId) {\n    this.$state.go('root.project', {projectId:projectId});\n  }\n\n  /**\n   * Launch the project in preview mode in a new tab\n   */\n  previewProject(projectId) {\n    let data = { constraints: true };\n    this.saveEvent('projectPreviewed', 'Authoring', data, projectId);\n    window.open(this.ConfigService.getWISEBaseURL() + '/project/' + projectId);\n  }\n\n  /**\n   * Send the user to the teacher home page\n   */\n  goHome() {\n    window.location = this.ConfigService.getWISEBaseURL() + '/teacher';\n  }\n\n  /**\n   * Save an Authoring Tool event\n   * @param eventName the name of the event\n   * @param category the category of the event\n   * example 'Navigation' or 'Authoring'\n   */\n  saveEvent(eventName, category, data, projectId) {\n    let context = 'AuthoringTool';\n    let nodeId = null;\n    let componentId = null;\n    let componentType = null;\n    if (data == null) {\n      data = {};\n    }\n    this.TeacherDataService.saveEvent(context, nodeId, componentId,\n        componentType, category, eventName, data, projectId);\n  }\n\n  scrollToTopOfPage() {\n    this.$anchorScroll('top');\n  }\n};\n\nAuthoringToolMainController.$inject = [\n    '$anchorScroll',\n    '$filter',\n    '$rootScope',\n    '$state',\n    '$timeout',\n    'ConfigService',\n    'ProjectService',\n    'TeacherDataService',\n    'UtilService'\n];\n\nexport default AuthoringToolMainController;\n"]}