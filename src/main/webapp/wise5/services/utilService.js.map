{"version":3,"sources":["utilService.es6"],"names":["UtilService","$filter","$injector","$rootScope","$timeout","componentTypeToLabel","$translate","length","CHARS","key","a","Math","floor","random","str","isNaN","Number","jsonObject","jsonObjectString","angular","toJson","fromJson","img_b64","blob","dataURItoBlob","now","Date","getTime","filename","encodeURIComponent","pngFile","File","lastModified","type","dataURI","byteString","split","indexOf","atob","unescape","mimeString","ia","Uint8Array","i","charCodeAt","Blob","imageElement","imageObject","canvas","document","createElement","width","naturalWidth","height","naturalHeight","ctx","getContext","drawImage","dataURL","toDataURL","getImageObjectFromBase64String","iframes","element","iframe","style","display","fileName","imageExtensionsRegEx","RegExp","lowerCaseFileName","toLowerCase","matchResult","match","videoExtensionsRegEx","html","insertWISELinkAnchors","insertWISELinkButtons","wiseLinkRegEx","wiseLinkRegExMatchResult","exec","anchorHTML","anchorText","nodeId","getWISELinkNodeId","componentIdAttr","componentId","getWISELinkComponentId","wiselinkHtml","replace","buttonHTML","buttonText","nodeIdRegEx","nodeIdRegExResult","componentIdRegEx","componentIdRegExResult","typeRegEx","typeRegExResult","linkTextRegEx","linkTextRegExResult","replaceWISELinksHelper","regex","wiseLinkHTML","componentHTML","getWISELinkType","linkText","getWISELinkLinkText","newElement","controller","projectId","target","tooltip","thisRootScope","InsertAssetButton","context","ui","$","summernote","button","contents","click","invoke","params","isPopup","$broadcast","render","InsertWISELinkButton","text","subjectString","searchString","position","isFinite","lastIndex","lastIndexOf","object1","object2","serverSaveTime","milliseconds","date","toDateString","toLocaleTimeString","componentType","label","componentService","get","getComponentTypeLabel","array1","array2","array1Copy","makeCopyOfJSONObject","sort","array2Copy","componentContent","connectedComponents","connectedComponent","arrayToCheck","maxWidth","newLineStr","done","res","found","testWhite","charAt","slice","join","x","white","test","trim","events","event","hasXConnectedComponent","connectedComponentType","id","duration","originalBackgroundColor","css","Array","prototype","last","$inject"],"mappings":"AAAA;;;;;;;;;;IAEMA,W;AACJ,uBACIC,OADJ,EAEIC,SAFJ,EAGIC,UAHJ,EAIIC,QAJJ,EAIc;AAAA;;AACZ,SAAKH,OAAL,GAAeA,OAAf;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,oBAAL,GAA4B,EAA5B;AACA,SAAKC,UAAL,GAAkB,KAAKL,OAAL,CAAa,WAAb,CAAlB;AACD;;AAED;;;;;;;;;gCAKYM,M,EAAQ;AAClB,WAAKC,KAAL,GAAa,CAAC,GAAD,EAAK,GAAL,EAAS,GAAT,EAAa,GAAb,EAAiB,GAAjB,EAAqB,GAArB,EAAyB,GAAzB,EAA6B,GAA7B,EAAiC,GAAjC,EAAqC,GAArC,EAAyC,GAAzC,EAA6C,GAA7C,EAAiD,GAAjD,EACT,GADS,EACL,GADK,EACD,GADC,EACG,GADH,EACO,GADP,EACY,GADZ,EACgB,GADhB,EACoB,GADpB,EACwB,GADxB,EAC4B,GAD5B,EACgC,GADhC,EACoC,GADpC,EACwC,GADxC,EAET,GAFS,EAEL,GAFK,EAED,GAFC,EAEG,GAFH,EAEO,GAFP,EAEW,GAFX,EAEe,GAFf,EAEmB,GAFnB,EAEuB,GAFvB,EAE2B,GAF3B,CAAb;;AAIA,UAAI,CAACD,MAAL,EAAa;AACXA,iBAAS,EAAT;AACD;;AAED,UAAIE,MAAM,EAAV;AACA,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIH,MAApB,EAA4BG,GAA5B,EAAiC;AAC/BD,eAAO,KAAKD,KAAL,CAAWG,KAAKC,KAAL,CAAWD,KAAKE,MAAL,MAAiB,KAAKL,KAAL,CAAWD,MAAX,GAAoB,CAArC,CAAX,CAAX,CAAP;AACD;;AAED,aAAOE,GAAP;AACD;;;;;AAED;;;;;;0CAMsBK,G,EAAK;AACzB,UAAIA,OAAO,IAAP,IAAeA,OAAO,EAAtB,IAA4B,CAACC,MAAMC,OAAOF,GAAP,CAAN,CAAjC,EAAqD;AACnD,eAAOE,OAAOF,GAAP,CAAP;AACD;AACD,aAAOA,GAAP;AACD;;;;;AAED;;;;;yCAKqBG,U,EAAY;AAC/B,UAAIA,cAAc,IAAlB,EAAwB;AACtB,YAAMC,mBAAmBC,QAAQC,MAAR,CAAeH,UAAf,CAAzB;AACA,eAAOE,QAAQE,QAAR,CAAiBH,gBAAjB,CAAP;AACD;AACD,aAAO,IAAP;AACD;;;;;AAED;;;;;mDAK+BI,O,EAAS;AACtC;AACA,UAAMC,OAAO,KAAKC,aAAL,CAAmBF,OAAnB,CAAb;;AAEA,UAAMG,MAAM,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;AACA,UAAMC,WAAWC,mBAAmB,aAAaJ,GAAb,GAAmB,MAAtC,CAAjB;AACA,UAAMK,UAAU,IAAIC,IAAJ,CAAS,CAACR,IAAD,CAAT,EAAiBK,QAAjB,EAA2B;AACzCI,sBAAcP,GAD2B,EACtB;AACnBQ,cAAM,WAFmC,CAEvB;AAFuB,OAA3B,CAAhB;AAIA,aAAOH,OAAP;AACD;;AAED;;;;;;;;kCAKcI,O,EAAS;AACrB,UAAIC,mBAAJ;AACA,UAAID,QAAQE,KAAR,CAAc,GAAd,EAAmB,CAAnB,EAAsBC,OAAtB,CAA8B,QAA9B,KAA2C,CAA/C,EACEF,aAAaG,KAAKJ,QAAQE,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAL,CAAb,CADF,KAGED,aAAaI,SAASL,QAAQE,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAT,CAAb;;AAEF;AACA,UAAMI,aAAaN,QAAQE,KAAR,CAAc,GAAd,EAAmB,CAAnB,EAAsBA,KAAtB,CAA4B,GAA5B,EAAiC,CAAjC,EAAoCA,KAApC,CAA0C,GAA1C,EAA+C,CAA/C,CAAnB;;AAEA;AACA,UAAMK,KAAK,IAAIC,UAAJ,CAAeP,WAAW5B,MAA1B,CAAX;AACA,WAAK,IAAIoC,IAAI,CAAb,EAAgBA,IAAIR,WAAW5B,MAA/B,EAAuCoC,GAAvC,EAA4C;AAC1CF,WAAGE,CAAH,IAAQR,WAAWS,UAAX,CAAsBD,CAAtB,CAAR;AACD;AACD,aAAO,IAAIE,IAAJ,CAAS,CAACJ,EAAD,CAAT,EAAe,EAACR,MAAKO,UAAN,EAAf,CAAP;AACD;;;;;AAED;;;;;mDAK+BM,Y,EAAc;AAC3C,UAAIC,cAAc,IAAlB;AACA,UAAID,gBAAgB,IAApB,EAA0B;AACxB;AACA,YAAME,SAASC,SAASC,aAAT,CAAuB,QAAvB,CAAf;;AAEA;AACAF,eAAOG,KAAP,GAAeL,aAAaM,YAA5B;AACAJ,eAAOK,MAAP,GAAgBP,aAAaQ,aAA7B;;AAEA;AACA,YAAMC,MAAMP,OAAOQ,UAAP,CAAkB,IAAlB,CAAZ;AACAD,YAAIE,SAAJ,CAAcX,YAAd,EAA4B,CAA5B,EAA+B,CAA/B;;AAEA,YAAMY,UAAUV,OAAOW,SAAP,CAAiB,WAAjB,CAAhB;AACAZ,sBAAc,KAAKa,8BAAL,CAAoCF,OAApC,CAAd;AACD;AACD,aAAOX,WAAP;AACD;;AAED;;;;;;;;;kCAMc;AACZ,UAAMc,UAAU1C,QAAQ2C,OAAR,CAAgB,QAAhB,CAAhB;AADY;AAAA;AAAA;;AAAA;AAEZ,6BAAmBD,OAAnB,8HAA4B;AAAA,cAAnBE,MAAmB;;AAC1B,cAAIA,UAAU,IAAd,EAAoB;AAClBA,mBAAOC,KAAP,CAAaC,OAAb,GAAuB,MAAvB;AACD;AACF;AANW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOb;;AAED;;;;;;;;;kCAMc;AACZ,UAAMJ,UAAU1C,QAAQ2C,OAAR,CAAgB,QAAhB,CAAhB;AADY;AAAA;AAAA;;AAAA;AAEZ,8BAAmBD,OAAnB,mIAA4B;AAAA,cAAnBE,MAAmB;;AAC1B,cAAIA,UAAU,IAAd,EAAoB;AAClBA,mBAAOC,KAAP,CAAaC,OAAb,GAAuB,EAAvB;AACD;AACF;AANW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOb;;AAED;;;;;;;;4BAKQC,Q,EAAU;AAChB,UAAIA,YAAY,IAAhB,EAAsB;AACpB,YAAMC,uBACF,IAAIC,MAAJ,CAAW,qCAAX,CADJ;AAEA,YAAMC,oBAAoBH,SAASI,WAAT,EAA1B;AACA,YAAMC,cAAcF,kBAAkBG,KAAlB,CAAwBL,oBAAxB,CAApB;;AAEA,YAAII,eAAe,IAAnB,EAAyB;AACvB,iBAAO,IAAP;AACD;AACF;AACD,aAAO,KAAP;AACD;;AAED;;;;;;;;4BAKQL,Q,EAAU;AAChB,UAAIA,YAAY,IAAhB,EAAsB;AACpB,YAAMO,uBACF,IAAIL,MAAJ,CAAW,4CAAX,CADJ;AAEA,YAAMC,oBAAoBH,SAASI,WAAT,EAA1B;AACA,YAAMC,cAAcF,kBAAkBG,KAAlB,CAAwBC,oBAAxB,CAApB;;AAEA,YAAIF,eAAe,IAAnB,EAAyB;AACvB,iBAAO,IAAP;AACD;AACF;AACD,aAAO,KAAP;AACD;;AAED;;;;;;;;;oCAMgBG,I,EAAM;AACpBA,aAAO,KAAKC,qBAAL,CAA2BD,IAA3B,CAAP;AACAA,aAAO,KAAKE,qBAAL,CAA2BF,IAA3B,CAAP;AACA,aAAOA,IAAP;AACD;;AAED;;;;;;;;;;0CAOsBA,I,EAAM;AAC1B,UAAIG,gBAAgB,IAAIT,MAAJ,CAAW,oCAAX,CAApB;AACA,UAAIU,2BAA2BD,cAAcE,IAAd,CAAmBL,IAAnB,CAA/B;;AAEA;AACA,aAAOI,4BAA4B,IAAnC,EAAyC;AACvC;AACA,YAAIE,aAAaF,yBAAyB,CAAzB,CAAjB;;AAEA;AACA,YAAIG,aAAaH,yBAAyB,CAAzB,CAAjB;;AAEA;AACA,YAAII,SAAS,KAAKC,iBAAL,CAAuBH,UAAvB,CAAb;;AAEA,YAAIE,UAAU,IAAd,EAAoB;AAClBA,mBAAS,EAAT;AACD;;AAED,YAAIE,kBAAkB,EAAtB;AACA,YAAIC,cAAc,KAAKC,sBAAL,CAA4BN,UAA5B,CAAlB;AACA,YAAIK,eAAe,IAAnB,EAAyB;AACvBD,4BAAkB,mBAAmBC,WAAnB,GAAiC,GAAnD;AACD;;AAED;AACA,YAAIE,eAAe,sCAAsCN,UAAtC,GAAmD,aAAnD,GAAmEC,MAAnE,GAA4E,IAA5E,GAAmFE,eAAnF,GAAqG,IAAxH;;AAEA;AACAV,eAAOA,KAAKc,OAAL,CAAaV,yBAAyB,CAAzB,CAAb,EAA0CS,YAA1C,CAAP;;AAEA;AACAT,mCAA2BD,cAAcE,IAAd,CAAmBL,IAAnB,CAA3B;AACD;AACD,aAAOA,IAAP;AACD;;AAED;;;;;;;;;;0CAOsBA,I,EAAM;AAC1B,UAAMG,gBAAgB,IAAIT,MAAJ,CAAW,8CAAX,CAAtB;AACA,UAAIU,2BAA2BD,cAAcE,IAAd,CAAmBL,IAAnB,CAA/B;;AAEA;AACA,aAAOI,4BAA4B,IAAnC,EAAyC;AACvC;AACA,YAAMW,aAAaX,yBAAyB,CAAzB,CAAnB;;AAEA;AACA,YAAMY,aAAaZ,yBAAyB,CAAzB,CAAnB;;AAEA;AACA,YAAII,SAAS,KAAKC,iBAAL,CAAuBM,UAAvB,CAAb;;AAEA,YAAIP,UAAU,IAAd,EAAoB;AAClBA,mBAAS,EAAT;AACD;;AAED,YAAIE,kBAAkB,EAAtB;AACA,YAAIC,cAAc,KAAKC,sBAAL,CAA4BG,UAA5B,CAAlB;AACA,YAAIJ,eAAe,IAAnB,EAAyB;AACvBD,4BAAkB,mBAAmBC,WAAnB,GAAiC,GAAnD;AACD;;AAED;AACA,YAAME,eAAe,wCAAwCG,UAAxC,GAAqD,aAArD,GAAqER,MAArE,GAA8E,IAA9E,GAAqFE,eAArF,GAAuG,IAA5H;;AAEA;AACAV,eAAOA,KAAKc,OAAL,CAAaV,yBAAyB,CAAzB,CAAb,EAA0CS,YAA1C,CAAP;;AAEA;AACAT,mCAA2BD,cAAcE,IAAd,CAAmBL,IAAnB,CAA3B;AACD;AACD,aAAOA,IAAP;AACD;;AAED;;;;;;;;;;;sCAQkBA,I,EAAM;AACtB,UAAIA,QAAQ,IAAZ,EAAkB;AAChB,YAAIiB,cAAc,IAAIvB,MAAJ,CAAW,wBAAX,EAAqC,GAArC,CAAlB;AACA,YAAIwB,oBAAoBD,YAAYZ,IAAZ,CAAiBL,IAAjB,CAAxB;AACA,YAAIkB,qBAAqB,IAAzB,EAA+B;AAC7B,iBAAOA,kBAAkB,CAAlB,CAAP;AACD;AACF;AACD,aAAO,IAAP;AACD;;AAED;;;;;;;;;;;2CAQuBlB,I,EAAM;AAC3B,UAAIA,QAAQ,IAAZ,EAAkB;AAChB,YAAImB,mBAAmB,IAAIzB,MAAJ,CAAW,6BAAX,EAA0C,GAA1C,CAAvB;AACA,YAAI0B,yBAAyBD,iBAAiBd,IAAjB,CAAsBL,IAAtB,CAA7B;AACA,YAAIoB,0BAA0B,IAA9B,EAAoC;AAClC,iBAAOA,uBAAuB,CAAvB,CAAP;AACD;AACF;AACD,aAAO,IAAP;AACD;;AAED;;;;;;;;;;;oCAQgBpB,I,EAAM;AACpB,UAAIA,QAAQ,IAAZ,EAAkB;AAChB,YAAIqB,YAAY,IAAI3B,MAAJ,CAAW,qBAAX,EAAkC,GAAlC,CAAhB;AACA,YAAI4B,kBAAkBD,UAAUhB,IAAV,CAAeL,IAAf,CAAtB;AACA,YAAIsB,mBAAmB,IAAvB,EAA6B;AAC3B,iBAAOA,gBAAgB,CAAhB,CAAP;AACD;AACF;AACD,aAAO,IAAP;AACD;;AAED;;;;;;;;;;wCAOoBtB,I,EAAM;AACxB,UAAIA,QAAQ,IAAZ,EAAkB;AAChB,YAAIuB,gBAAgB,IAAI7B,MAAJ,CAAW,0BAAX,EAAuC,GAAvC,CAApB;AACA,YAAI8B,sBAAsBD,cAAclB,IAAd,CAAmBL,IAAnB,CAA1B;AACA,YAAIwB,uBAAuB,IAA3B,EAAiC;AAC/B,iBAAOA,oBAAoB,CAApB,CAAP;AACD;AACF;AACD,aAAO,IAAP;AACD;;AAED;;;;;;;;qCAKiBxB,I,EAAM;AACrBA,aAAO,KAAKyB,sBAAL,CAA4BzB,IAA5B,EAAkC,iBAAlC,CAAP;AACAA,aAAO,KAAKyB,sBAAL,CAA4BzB,IAA5B,EAAkC,8BAAlC,CAAP;AACA,aAAOA,IAAP;AACD;;AAED;;;;;;;;;;2CAOuBA,I,EAAM0B,K,EAAO;AAClC,UAAIvB,gBAAgB,IAAIT,MAAJ,CAAWgC,KAAX,CAApB;AACA,UAAItB,2BAA2BD,cAAcE,IAAd,CAAmBL,IAAnB,CAA/B;;AAEA;AACA,aAAOI,4BAA4B,IAAnC,EAAyC;AACvC;;;;AAIA,YAAIuB,eAAevB,yBAAyB,CAAzB,CAAnB;;AAEA;AACA,YAAII,SAAS,KAAKC,iBAAL,CAAuBkB,YAAvB,CAAb;AACA,YAAIhB,cAAc,KAAKC,sBAAL,CAA4Be,YAA5B,CAAlB;AACA,YAAIC,gBAAgB,EAApB;AACA,YAAIjB,eAAe,IAAf,IAAuBA,eAAe,EAA1C,EAA8C;AAC5CiB,0BAAgB,mBAAmBjB,WAAnB,GAAiC,GAAjD;AACD;AACD,YAAIpD,OAAO,KAAKsE,eAAL,CAAqBF,YAArB,CAAX;AACA,YAAIG,WAAW,KAAKC,mBAAL,CAAyBJ,YAAzB,CAAf;;AAEA,YAAIK,aAAa,IAAjB;;AAEA,YAAIzE,QAAQ,MAAZ,EAAoB;AAClB;AACAyE,uBAAa,iCAAiCxB,MAAjC,GAA0C,IAA1C,GAAiDoB,aAAjD,GAAiE,GAAjE,GAAuEE,QAAvE,GAAkF,MAA/F;AACD,SAHD,MAGO,IAAIvE,QAAQ,QAAZ,EAAsB;AAC3B;AACAyE,uBAAa,sCAAsCxB,MAAtC,GAA+C,IAA/C,GAAsDoB,aAAtD,GAAsE,GAAtE,GAA4EE,QAA5E,GAAuF,WAApG;AACD,SAHM,MAGA;AACL;AACAE,uBAAa,iCAAiCxB,MAAjC,GAA0C,IAA1C,GAAiDoB,aAAjD,GAAiE,GAAjE,GAAuEE,QAAvE,GAAkF,MAA/F;AACD;;AAED,YAAIE,cAAc,IAAlB,EAAwB;AACtB;AACAhC,iBAAOA,KAAKc,OAAL,CAAaa,YAAb,EAA2BK,UAA3B,CAAP;AACD;;AAED;AACA5B,mCAA2BD,cAAcE,IAAd,CAAmBL,IAAnB,CAA3B;AACD;AACD,aAAOA,IAAP;AACD;;AAED;;;;;;;;;;;;;;;4CAYwBiC,U,EAAYC,S,EAAW1B,M,EAAQG,W,EAAawB,M,EAAQC,O,EAAS;AACnF,UAAMC,gBAAgB,KAAK5G,UAA3B;;AAEA,UAAM6G,oBAAoB,SAApBA,iBAAoB,CAASC,OAAT,EAAkB;AAC1C,YAAMC,KAAKC,EAAEC,UAAF,CAAaF,EAAxB;;AAEA,YAAMG,SAASH,GAAGG,MAAH,CAAU;AACvBC,oBAAU,mCADa;AAEvBR,mBAASA,OAFc;AAGvBS,iBAAO,iBAAY;AACjB;AACAN,oBAAQO,MAAR,CAAe,kBAAf;;AAEA;AACA,gBAAMC,SAAS,EAAf;AACAA,mBAAOC,OAAP,GAAiB,IAAjB;;AAEA,gBAAId,aAAa,IAAjB,EAAuB;AACrBa,qBAAOb,SAAP,GAAmBA,SAAnB;AACD;;AAED,gBAAI1B,UAAU,IAAd,EAAoB;AAClBuC,qBAAOvC,MAAP,GAAgBA,MAAhB;AACD;;AAED,gBAAIG,eAAe,IAAnB,EAAyB;AACvBoC,qBAAOpC,WAAP,GAAqBA,WAArB;AACD;;AAEDoC,mBAAOZ,MAAP,GAAgBA,MAAhB;;AAEA;AACAE,0BAAcY,UAAd,CAAyB,kBAAzB,EAA6CF,MAA7C;AACD;AA3BsB,SAAV,CAAf;AA6BA,eAAOJ,OAAOO,MAAP,EAAP,CAhC0C,CAgChB;AAC3B,OAjCD;AAkCA,aAAOZ,iBAAP;AACD;;AAED;;;;;;;;;;;;;;;+CAY2BL,U,EAAYC,S,EAAW1B,M,EAAQG,W,EAAawB,M,EAAQC,O,EAAS;AACtF,UAAMC,gBAAgB,KAAK5G,UAA3B;;AAEA,UAAM0H,uBAAuB,SAAvBA,oBAAuB,CAASZ,OAAT,EAAkB;AAC7C,YAAMC,KAAKC,EAAEC,UAAF,CAAaF,EAAxB;;AAEA,YAAMG,SAASH,GAAGG,MAAH,CAAU;AACvBC,oBAAU,gCADa;AAEvBR,mBAASA,OAFc;AAGvBS,iBAAO,iBAAY;AACjB;AACAN,oBAAQO,MAAR,CAAe,kBAAf;;AAEA;AACA,gBAAMC,SAAS,EAAf;;AAEA,gBAAIb,aAAa,IAAjB,EAAuB;AACrBa,qBAAOb,SAAP,GAAmBA,SAAnB;AACD;;AAED,gBAAI1B,UAAU,IAAd,EAAoB;AAClBuC,qBAAOvC,MAAP,GAAgBA,MAAhB;AACD;;AAED,gBAAIG,eAAe,IAAnB,EAAyB;AACvBoC,qBAAOpC,WAAP,GAAqBA,WAArB;AACD;;AAEDoC,mBAAOZ,MAAP,GAAgBA,MAAhB;;AAEA;AACAE,0BAAcY,UAAd,CAAyB,qBAAzB,EAAgDF,MAAhD;AACD;AA1BsB,SAAV,CAAf;AA4BA,eAAOJ,OAAOO,MAAP,EAAP,CA/B6C,CA+BnB;AAC3B,OAhCD;AAiCA,aAAOC,oBAAP;AACD;;AAED;;;;;;;;mCAKenD,I,EAAM;AACnB,UAAIoD,OAAO,EAAX;AACA,UAAIpD,QAAQ,IAAZ,EAAkB;AAChB;AACAoD,eAAOpD,KAAKc,OAAL,CAAa,iBAAb,EAAgC,GAAhC,CAAP;AACAsC,eAAOA,KAAKtC,OAAL,CAAa,KAAb,EAAoB,GAApB,CAAP;AACAsC,eAAOA,KAAKtC,OAAL,CAAa,KAAb,EAAoB,GAApB,CAAP;AACD;AACD,aAAOsC,IAAP;AACD;;AAED;;;;;;;;;;6BAOSC,a,EAAeC,Y,EAAcC,Q,EAAU;AAC9C,UAAI,OAAOA,QAAP,KAAoB,QAApB,IAAgC,CAACC,SAASD,QAAT,CAAjC,IAAuDtH,KAAKC,KAAL,CAAWqH,QAAX,MAAyBA,QAAhF,IAA4FA,WAAWF,cAAcxH,MAAzH,EAAiI;AAC/H0H,mBAAWF,cAAcxH,MAAzB;AACD;AACD0H,kBAAYD,aAAazH,MAAzB;AACA,UAAM4H,YAAYJ,cAAcK,WAAd,CAA0BJ,YAA1B,EAAwCC,QAAxC,CAAlB;AACA,aAAOE,cAAc,CAAC,CAAf,IAAoBA,cAAcF,QAAzC;AACD;;AAED;;;;;;;;;;;yCAQqBI,O,EAASC,O,EAAS;AACrC,UAAID,QAAQE,cAAR,GAAyBD,QAAQC,cAArC,EAAqD;AACnD,eAAO,CAAC,CAAR;AACD,OAFD,MAEO,IAAIF,QAAQE,cAAR,GAAyBD,QAAQC,cAArC,EAAqD;AAC1D,eAAO,CAAP;AACD,OAFM,MAEA;AACL,eAAO,CAAP;AACD;AACF;;AAED;;;;;;;;;;2DAOuCC,Y,EAAc;AACnD,UAAMC,OAAO,IAAI/G,IAAJ,CAAS8G,YAAT,CAAb;AACA,UAAIC,QAAQ,IAAZ,EAAkB;AAChB,eAAOA,KAAKC,YAAL,KAAsB,GAAtB,GAA4BD,KAAKE,kBAAL,EAAnC;AACD;AACD,aAAO,EAAP;AACD;;AAED;;;;;;;;0CAKsBC,a,EAAe;AACnC;;;;AAIA,UAAIC,QAAQ,KAAKxI,oBAAL,CAA0BuI,aAA1B,CAAZ;;AAEA,UAAIC,SAAS,IAAb,EAAmB;AACjB,YAAIC,mBAAmB,KAAK5I,SAAL,CAAe6I,GAAf,CAAmBH,gBAAgB,SAAnC,CAAvB;AACA,YAAIE,oBAAoB,IAApB,IAA4BA,iBAAiBE,qBAAjB,IAA0C,IAA1E,EAAgF;AAC9EH,kBAAQC,iBAAiBE,qBAAjB,EAAR;AACA,eAAK3I,oBAAL,CAA0BuI,aAA1B,IAA2CC,KAA3C;AACD;AACF;;AAED,UAAIA,SAAS,IAAb,EAAmB;AACjB;;;;AAIAA,gBAAQD,aAAR;AACD;AACD,aAAOC,KAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;;4CAgBwBI,M,EAAQC,M,EAAQ;AACtC,UAAID,UAAU,IAAV,IAAkBC,UAAU,IAAhC,EAAsC;AACpC,YAAMC,aAAa,KAAKC,oBAAL,CAA0BH,MAA1B,CAAnB;AACAE,mBAAWE,IAAX;;AAEA,YAAMC,aAAa,KAAKF,oBAAL,CAA0BF,MAA1B,CAAnB;AACAI,mBAAWD,IAAX;;AAEA,YAAIlI,QAAQC,MAAR,CAAe+H,UAAf,KAA8BhI,QAAQC,MAAR,CAAekI,UAAf,CAAlC,EAA8D;AAC5D,iBAAO,IAAP;AACD;AACF;AACD,aAAO,KAAP;AACD;;AAED;;;;;;;;0CAKsBC,gB,EAAkB;AACtC,UAAIA,oBAAoB,IAAxB,EAA8B;AAC5B,YAAMC,sBAAsBD,iBAAiBC,mBAA7C;AACA,YAAIA,uBAAuB,IAAvB,IAA+BA,oBAAoBjJ,MAApB,GAA6B,CAAhE,EAAmE;AACjE,iBAAO,IAAP;AACD;AACF;AACD,aAAO,KAAP;AACD;;AAED;;;;;;;;kDAK8BgJ,gB,EAAkB;AAC9C,UAAIA,oBAAoB,IAAxB,EAA8B;AAC5B,YAAMC,sBAAsBD,iBAAiBC,mBAA7C;AACA,YAAIA,uBAAuB,IAA3B,EAAiC;AAAA;AAAA;AAAA;;AAAA;AAC/B,kCAA+BA,mBAA/B,mIAAoD;AAAA,kBAA3CC,kBAA2C;;AAClD,kBAAIA,sBAAsB,IAA1B,EAAgC;AAC9B,oBAAIA,mBAAmBxH,IAAnB,IAA2B,UAA/B,EAA2C;AACzC,yBAAO,IAAP;AACD;AACF;AACF;AAP8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQhC;AACF;AACD,aAAO,KAAP;AACD;;AAED;;;;;;;;oDAKgCsH,gB,EAAkB;AAChD,UAAIA,oBAAoB,IAAxB,EAA8B;AAC5B,YAAMC,sBAAsBD,iBAAiBC,mBAA7C;AACA,YAAIA,uBAAuB,IAA3B,EAAiC;AAAA;AAAA;AAAA;;AAAA;AAC/B,kCAA+BA,mBAA/B,mIAAoD;AAAA,kBAA3CC,kBAA2C;;AAClD,kBAAIA,sBAAsB,IAA1B,EAAgC;AAC9B,oBAAIA,mBAAmBxH,IAAnB,IAA2B,YAA/B,EAA6C;AAC3C,yBAAO,IAAP;AACD;AACF;AACF;AAP8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQhC;AACF;AACD,aAAO,KAAP;AACD;;AAED;;;;;;;;;2CAMuByH,Y,EAAc;AACnC,UAAIA,gBAAgB,IAApB,EAA0B;AAAA;AAAA;AAAA;;AAAA;AACxB,gCAAoBA,YAApB,mIAAkC;AAAA,gBAAzB5F,OAAyB;;AAChC,gBAAIA,WAAW,IAAf,EAAqB;AACnB,qBAAO,IAAP;AACD;AACF;AALuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMzB;AACD,aAAO,KAAP;AACD;;AAED;;;;;;;;;;;;6BASShD,G,EAAK6I,Q,EAAU;AACtB,UAAI7I,IAAIP,MAAJ,IAAcoJ,QAAlB,EAA4B;AAC1B,eAAO7I,GAAP;AACD;AACD,UAAI8I,aAAa,IAAjB;AACA,UAAIC,OAAO,KAAX;AACA,UAAIC,MAAM,EAAV;AACA,SAAG;AACC,YAAIC,QAAQ,KAAZ;AACA;AACA,aAAK,IAAIpH,IAAIgH,WAAW,CAAxB,EAA2BhH,KAAK,CAAhC,EAAmCA,GAAnC,EAAwC;AACpC,cAAI,KAAKqH,SAAL,CAAelJ,IAAImJ,MAAJ,CAAWtH,CAAX,CAAf,CAAJ,EAAmC;AAC/BmH,kBAAMA,MAAM,CAAChJ,IAAIoJ,KAAJ,CAAU,CAAV,EAAavH,CAAb,CAAD,EAAkBiH,UAAlB,EAA8BO,IAA9B,CAAmC,EAAnC,CAAZ;AACArJ,kBAAMA,IAAIoJ,KAAJ,CAAUvH,IAAI,CAAd,CAAN;AACAoH,oBAAQ,IAAR;AACA;AACH;AACJ;AACD;AACA,YAAI,CAACA,KAAL,EAAY;AACRD,iBAAO,CAAChJ,IAAIoJ,KAAJ,CAAU,CAAV,EAAaP,QAAb,CAAD,EAAyBC,UAAzB,EAAqCO,IAArC,CAA0C,EAA1C,CAAP;AACArJ,gBAAMA,IAAIoJ,KAAJ,CAAUP,QAAV,CAAN;AACH;;AAED,YAAI7I,IAAIP,MAAJ,GAAaoJ,QAAjB,EACIE,OAAO,IAAP;AACP,OAnBD,QAmBS,CAACA,IAnBV;;AAqBA,aAAOC,MAAMhJ,GAAb;AACD;;AAED;;;;;;;;8BAKUsJ,C,EAAG;AACX,UAAIC,QAAQ,IAAIjG,MAAJ,CAAW,MAAX,CAAZ;AACA,aAAOiG,MAAMC,IAAN,CAAWF,EAAEH,MAAF,CAAS,CAAT,CAAX,CAAP;AACD;;;;;AAED;;;;;8BAKUnJ,G,EAAK;AACb,aAAOA,IAAIyJ,IAAJ,GAAWnI,KAAX,CAAiB,KAAjB,EAAwB7B,MAA/B;AACD;;AAED;;;;;;;;wCAKoBiK,M,EAAQ;AAAA;AAAA;AAAA;;AAAA;AAC1B,8BAAkBA,MAAlB,mIAA0B;AAAA,cAAjBC,KAAiB;;AACxB,cAAIA,MAAMA,KAAN,IAAe,aAAnB,EAAkC;AAChC,mBAAO,IAAP;AACD;AACF;AALyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAM1B,aAAO,KAAP;AACD;;AAED;;;;;;;;oDAKgClB,gB,EAAkB;AAChD,aAAO,KAAKmB,sBAAL,CAA4BnB,gBAA5B,EAA8C,YAA9C,CAAP;AACD;;AAED;;;;;;;;kDAK8BA,gB,EAAkB;AAC9C,aAAO,KAAKmB,sBAAL,CAA4BnB,gBAA5B,EAA8C,UAA9C,CAAP;AACD;;AAED;;;;;;;;2DAKuCA,gB,EAAkB;AACvD,aAAO,KAAKmB,sBAAL,CAA4BnB,gBAA5B,EAA8C,mBAA9C,CAAP;AACD;;AAED;;;;;;;;;2CAMuBA,gB,EAAkBoB,sB,EAAwB;AAC/D,UAAIpB,iBAAiBC,mBAAjB,IAAwC,IAA5C,EAAkD;AAChD,YAAIA,sBAAsBD,iBAAiBC,mBAA3C;AACA;AAFgD;AAAA;AAAA;;AAAA;AAGhD,gCAA+BA,mBAA/B,mIAAoD;AAAA,gBAA3CC,kBAA2C;;AAClD,gBAAIA,mBAAmBxH,IAAnB,IAA2B0I,sBAA/B,EAAuD;AACrD;AACA,qBAAO,IAAP;AACD;AACF;AAR+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASjD;AACD,aAAO,KAAP;AACD;;AAED;;;;;;;;gDAK4BC,E,EAAqB;AAAA;;AAAA,UAAjBC,QAAiB,uEAAN,IAAM;;AAC/C,UAAI/G,UAAUqD,EAAE,MAAMyD,EAAR,CAAd;AACA,UAAIE,0BAA0BhH,QAAQiH,GAAR,CAAY,iBAAZ,CAA9B;AACAjH,cAAQiH,GAAR,CAAY,kBAAZ,EAAgC,SAAhC;;AAEA;;;;;;AAMA,WAAK3K,QAAL,CAAc,YAAM;AAClB;AACA0D,gBAAQiH,GAAR,CAAY;AACV,wBAAc,iCADJ;AAEV,8BAAoBD;AAFV,SAAZ;;AAKA;;;;;AAKA,cAAK1K,QAAL,CAAc,YAAM;AAClB0D,kBAAQiH,GAAR,CAAY;AACV,0BAAc,EADJ;AAEV,gCAAoB;AAFV,WAAZ;AAID,SALD,EAKG,IALH;AAMD,OAlBD,EAkBGF,QAlBH;AAmBD;;;;;;AAGH;;;AACA,IAAI,CAACG,MAAMC,SAAN,CAAgBC,IAArB,EAA2B;AACzBF,QAAMC,SAAN,CAAgBC,IAAhB,GAAuB,YAAW;AAChC,WAAO,KAAK,KAAK3K,MAAL,GAAc,CAAnB,CAAP;AACD,GAFD;AAGD;;AAEDP,YAAYmL,OAAZ,GAAsB,CACpB,SADoB,EAEpB,WAFoB,EAGpB,YAHoB,EAIpB,UAJoB,CAAtB;;kBAOenL,W","file":"utilService.js","sourcesContent":["'use strict';\n\nclass UtilService {\n  constructor(\n      $filter,\n      $injector,\n      $rootScope,\n      $timeout) {\n    this.$filter = $filter;\n    this.$injector = $injector;\n    this.$rootScope = $rootScope;\n    this.$timeout = $timeout;\n    this.componentTypeToLabel = {};\n    this.$translate = this.$filter('translate');\n  }\n\n  /**\n   * Generates and returns a random key of the given length if\n   * specified. If length is not specified, returns a key 10\n   * characters in length.\n   */\n  generateKey(length) {\n    this.CHARS = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\n        \"n\",\"o\",\"p\",\"q\",\"r\", \"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\n        \"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"];\n\n    if (!length) {\n      length = 10;\n    }\n\n    let key = '';\n    for (let a = 0; a < length; a++) {\n      key += this.CHARS[Math.floor(Math.random() * (this.CHARS.length - 1))];\n    }\n\n    return key;\n  };\n\n  /**\n   * Try to convert a string to a number\n   * @param str the string to convert\n   * @returns a number if we were able to convert the string to a number.\n   * if we couldn't convert the string to a number we will just return the string.\n   */\n  convertStringToNumber(str) {\n    if (str != null && str != '' && !isNaN(Number(str))) {\n      return Number(str);\n    }\n    return str;\n  };\n\n  /**\n   * Create a copy of a JSON object\n   * @param jsonObject the JSON object to get a copy of\n   * @return a copy of the JSON object that was passed in\n   */\n  makeCopyOfJSONObject(jsonObject) {\n    if (jsonObject != null) {\n      const jsonObjectString = angular.toJson(jsonObject);\n      return angular.fromJson(jsonObjectString);\n    }\n    return null;\n  };\n\n  /**\n   * Get the image object\n   * @params img_b64 the base64 image string\n   * @returns an image object\n   */\n  getImageObjectFromBase64String(img_b64) {\n    // create a blob from the base64 image string\n    const blob = this.dataURItoBlob(img_b64);\n\n    const now = new Date().getTime();\n    const filename = encodeURIComponent('picture_' + now + '.png');\n    const pngFile = new File([blob], filename, {\n      lastModified: now, // optional - default = now\n      type: 'image/png' // optional - default = ''\n    });\n    return pngFile;\n  }\n\n  /**\n   * Convert base64/URLEncoded data component to raw binary data held in a string\n   * @param dataURI base64/URLEncoded data\n   * @returns a Blob object\n   */\n  dataURItoBlob(dataURI) {\n    let byteString;\n    if (dataURI.split(',')[0].indexOf('base64') >= 0)\n      byteString = atob(dataURI.split(',')[1]);\n    else\n      byteString = unescape(dataURI.split(',')[1]);\n\n    // separate out the mime component\n    const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n\n    // write the bytes of the string to a typed array\n    const ia = new Uint8Array(byteString.length);\n    for (let i = 0; i < byteString.length; i++) {\n      ia[i] = byteString.charCodeAt(i);\n    }\n    return new Blob([ia], {type:mimeString});\n  };\n\n  /**\n   * Get an image object from an image element\n   * @param imageElement an image element (<img src='abc.jpg'/>)\n   * @returns an image object\n   */\n  getImageObjectFromImageElement(imageElement) {\n    let imageObject = null;\n    if (imageElement != null) {\n      // create a canvas element that we will use to generate a base64 string\n      const canvas = document.createElement(\"canvas\");\n\n      // set the width and height of the canvas to match the image dimensions\n      canvas.width = imageElement.naturalWidth;\n      canvas.height = imageElement.naturalHeight;\n\n      // draw the image onto the canvas\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(imageElement, 0, 0);\n\n      const dataURL = canvas.toDataURL(\"image/png\");\n      imageObject = this.getImageObjectFromBase64String(dataURL);\n    }\n    return imageObject;\n  }\n\n  /**\n   * Hide all the iframes. This is used before a student snips something\n   * to put into their notebook. Iframes shift the position of elements\n   * below it which causes issues when html2canvas tries to capture\n   * certain elements.\n   */\n  hideIFrames() {\n    const iframes = angular.element('iframe');\n    for (let iframe of iframes) {\n      if (iframe != null) {\n        iframe.style.display = 'none';\n      }\n    }\n  }\n\n  /**\n   * Show all the iframes. This is used after the student snips something\n   * to put into their notebook. Iframes shift the position of elements\n   * below it which causes issues when html2canvas tries to capture\n   * certain elements.\n   */\n  showIFrames() {\n    const iframes = angular.element('iframe');\n    for (let iframe of iframes) {\n      if (iframe != null) {\n        iframe.style.display = '';\n      }\n    }\n  }\n\n  /**\n   * Check if the asset is an image\n   * @param fileName the file name of the asset\n   * @return whether the asset is an image or not\n   */\n  isImage(fileName) {\n    if (fileName != null) {\n      const imageExtensionsRegEx =\n          new RegExp('.*\\.(png|jpg|jpeg|bmp|gif|tiff|svg)');\n      const lowerCaseFileName = fileName.toLowerCase();\n      const matchResult = lowerCaseFileName.match(imageExtensionsRegEx);\n\n      if (matchResult != null) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if the asset is a video\n   * @param fileName the file name of the asset\n   * @return whether the asset is a video or not\n   */\n  isVideo(fileName) {\n    if (fileName != null) {\n      const videoExtensionsRegEx =\n          new RegExp('.*\\.(mp4|mpg|mpeg|m4v|m2v|avi|gifv|mov|qt)');\n      const lowerCaseFileName = fileName.toLowerCase();\n      const matchResult = lowerCaseFileName.match(videoExtensionsRegEx);\n\n      if (matchResult != null) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Replace <a> and <button> elements with <wiselink> elements where\n   * applicable\n   * @param html the html\n   * @return the modified html with <wiselink> elements\n   */\n  insertWISELinks(html) {\n    html = this.insertWISELinkAnchors(html);\n    html = this.insertWISELinkButtons(html);\n    return html;\n  }\n\n  /**\n   * Replace <a> elements that have the parameter wiselink=true with\n   * <wiselink> elements\n   * @param html the html\n   * @return the modified html with certain <a> elements replaced with\n   * <wiselink> elements\n   */\n  insertWISELinkAnchors(html) {\n    let wiseLinkRegEx = new RegExp(/<a.*?wiselink=\"true\".*?>(.*?)<\\/a>/);\n    let wiseLinkRegExMatchResult = wiseLinkRegEx.exec(html);\n\n    // loop until we have replaced all the matches\n    while (wiseLinkRegExMatchResult != null) {\n      // get the whole <a> element\n      let anchorHTML = wiseLinkRegExMatchResult[0];\n\n      // get the inner html of the <a> element\n      let anchorText = wiseLinkRegExMatchResult[1];\n\n      // get the node id parameter of the <a> element\n      let nodeId = this.getWISELinkNodeId(anchorHTML);\n\n      if (nodeId == null) {\n        nodeId = '';\n      }\n\n      let componentIdAttr = \"\";\n      let componentId = this.getWISELinkComponentId(anchorHTML);\n      if (componentId != null) {\n        componentIdAttr = \"component-id='\" + componentId + \"'\";\n      }\n\n      // create the <wiselink> element\n      let wiselinkHtml = \"<wiselink type='link' link-text='\" + anchorText + \"' node-id='\" + nodeId + \"' \" + componentIdAttr + \"/>\";\n\n      // replace the <a> element with the <wiselink> element\n      html = html.replace(wiseLinkRegExMatchResult[0], wiselinkHtml);\n\n      // search for the next <a> element with the parameter wiselink=true\n      wiseLinkRegExMatchResult = wiseLinkRegEx.exec(html);\n    }\n    return html;\n  }\n\n  /**\n   * Replace <button> elements that have the parameter wiselink=true\n   * with <wiselink> elements\n   * @param html the html\n   * @return the modified html with certain <button> elements replaced with\n   * <wiselink> elements\n   */\n  insertWISELinkButtons(html) {\n    const wiseLinkRegEx = new RegExp(/<button.*?wiselink=\"true\".*?>(.*?)<\\/button>/);\n    let wiseLinkRegExMatchResult = wiseLinkRegEx.exec(html);\n\n    // loop until we have replaced all the matches\n    while (wiseLinkRegExMatchResult != null) {\n      // get the whole <button> element\n      const buttonHTML = wiseLinkRegExMatchResult[0];\n\n      // get the inner html of the <button> element\n      const buttonText = wiseLinkRegExMatchResult[1];\n\n      // get the node id parameter of the <button> element\n      let nodeId = this.getWISELinkNodeId(buttonHTML);\n\n      if (nodeId == null) {\n        nodeId = '';\n      }\n\n      let componentIdAttr = \"\";\n      let componentId = this.getWISELinkComponentId(buttonHTML);\n      if (componentId != null) {\n        componentIdAttr = \"component-id='\" + componentId + \"'\";\n      }\n\n      // create the <wiselink> element\n      const wiselinkHtml = \"<wiselink type='button' link-text='\" + buttonText + \"' node-id='\" + nodeId + \"' \" + componentIdAttr + \"/>\";\n\n      // replace the <button> element with the <wiselink> element\n      html = html.replace(wiseLinkRegExMatchResult[0], wiselinkHtml);\n\n      // search for the next <button> element with the parameter wiselink=true\n      wiseLinkRegExMatchResult = wiseLinkRegEx.exec(html);\n    }\n    return html;\n  }\n\n  /**\n   * Get the node id from the wiselink element\n   * e.g.\n   * <wiselink node-id='node5'/>\n   * the node id in this case is 'node5'\n   * @param html the html for the element\n   * @return the node id from the node id parameter in the element\n   */\n  getWISELinkNodeId(html) {\n    if (html != null) {\n      let nodeIdRegEx = new RegExp(/node-id=[\"'b](.*?)[\"']/, 'g');\n      let nodeIdRegExResult = nodeIdRegEx.exec(html);\n      if (nodeIdRegExResult != null) {\n        return nodeIdRegExResult[1];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the component id from the wiselink element\n   * e.g.\n   * <wiselink node-id='node5' component-id='xyzabc' />\n   * the component id in this case is 'xyzabc'\n   * @param html the html for the element\n   * @return the component id from the component id parameter in the element\n   */\n  getWISELinkComponentId(html) {\n    if (html != null) {\n      let componentIdRegEx = new RegExp(/component-id=[\"'b](.*?)[\"']/, 'g');\n      let componentIdRegExResult = componentIdRegEx.exec(html);\n      if (componentIdRegExResult != null) {\n        return componentIdRegExResult[1];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the link type from the wiselink element\n   * e.g.\n   * <wiselink type='button'/>\n   * the type in this case is 'button'\n   * @param html the html for the element\n   * @return the link type from the type parameter in the element\n   */\n  getWISELinkType(html) {\n    if (html != null) {\n      let typeRegEx = new RegExp(/type=[\"'b](.*?)[\"']/, 'g');\n      let typeRegExResult = typeRegEx.exec(html);\n      if (typeRegExResult != null) {\n        return typeRegExResult[1];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the link text from the wiselink element\n   * <wiselink link-text='Go to here'/>\n   * the link text in this case is 'Go to here'\n   * @param html the html for the element\n   * @return the link text from the link text parameter in the element\n   */\n  getWISELinkLinkText(html) {\n    if (html != null) {\n      let linkTextRegEx = new RegExp(/link-text=[\"'b](.*?)[\"']/, 'g');\n      let linkTextRegExResult = linkTextRegEx.exec(html);\n      if (linkTextRegExResult != null) {\n        return linkTextRegExResult[1];\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Replace <wiselink> elements with <a> and <button> elements\n   * @param html the html\n   * @return the modified html without <wiselink> elements\n   */\n  replaceWISELinks(html) {\n    html = this.replaceWISELinksHelper(html, '<wiselink.*?\\/>');\n    html = this.replaceWISELinksHelper(html, '<wiselink.*?>.*?<\\/wiselink>');\n    return html;\n  }\n\n  /**\n   * Helper function for replacing <wiselink> elements with <a> and <button>\n   * elements\n   * @param html the html\n   * @param regex the regex string to search for\n   * @return the html without <wiselink> elements\n   */\n  replaceWISELinksHelper(html, regex) {\n    let wiseLinkRegEx = new RegExp(regex);\n    let wiseLinkRegExMatchResult = wiseLinkRegEx.exec(html);\n\n    // loop until we have replaced all the matches\n    while (wiseLinkRegExMatchResult != null) {\n      /*\n       * get the whole match\n       * e.g. <wiselink type='link' node-id='node5' link-text='Go to here'/>\n       */\n      let wiseLinkHTML = wiseLinkRegExMatchResult[0];\n\n      // get the node id, component id (if exists), type and link text from the match\n      let nodeId = this.getWISELinkNodeId(wiseLinkHTML);\n      let componentId = this.getWISELinkComponentId(wiseLinkHTML);\n      let componentHTML = '';\n      if (componentId != null && componentId != '') {\n        componentHTML = \"component-id='\" + componentId + \"'\";\n      }\n      let type = this.getWISELinkType(wiseLinkHTML);\n      let linkText = this.getWISELinkLinkText(wiseLinkHTML);\n\n      let newElement = null;\n\n      if (type == 'link') {\n        // create a link that represents the wiselink\n        newElement = \"<a wiselink='true' node-id='\" + nodeId + \"' \" + componentHTML + \">\" + linkText + \"</a>\";\n      } else if (type == 'button') {\n        // create a button that represents the wiselink\n        newElement = \"<button wiselink='true' node-id='\" + nodeId + \"' \" + componentHTML + \">\" + linkText + \"</button>\";\n      } else {\n        // default to creating a link that represents the wiselink\n        newElement = \"<a wiselink='true' node-id='\" + nodeId + \"' \" + componentHTML + \">\" + linkText + \"</a>\";\n      }\n\n      if (newElement != null) {\n        // replace the wiselink with the new element\n        html = html.replace(wiseLinkHTML, newElement);\n      }\n\n      // find the next match\n      wiseLinkRegExMatchResult = wiseLinkRegEx.exec(html);\n    }\n    return html;\n  }\n\n  /**\n   * Create a custom summernote button that inserts a WISE asset into\n   * summernote\n   * @param controller the controller that is creating the button\n   * e.g. openResponseController\n   * @param nodeId the node id of the component that is creating the button\n   * @param componentId the component id of the component that is creating the button\n   * @param target the target element in the component to insert the asset into\n   * e.g. 'prompt' or 'rubricSummernoteId'\n   * @param tooltip the tooltip text for the custom button\n   * @return custom summernote button\n   */\n  createInsertAssetButton(controller, projectId, nodeId, componentId, target, tooltip) {\n    const thisRootScope = this.$rootScope;\n\n    const InsertAssetButton = function(context) {\n      const ui = $.summernote.ui;\n\n      const button = ui.button({\n        contents: '<i class=\"note-icon-picture\"></i>',\n        tooltip: tooltip,\n        click: function () {\n          // remember the position of the cursor\n          context.invoke('editor.saveRange');\n\n          // create the params for opening the asset chooser\n          const params = {};\n          params.isPopup = true;\n\n          if (projectId != null) {\n            params.projectId = projectId;\n          }\n\n          if (nodeId != null) {\n            params.nodeId = nodeId;\n          }\n\n          if (componentId != null) {\n            params.componentId = componentId;\n          }\n\n          params.target = target;\n\n          // display the asset chooser\n          thisRootScope.$broadcast('openAssetChooser', params);\n        }\n      });\n      return button.render();   // return button as jquery object\n    };\n    return InsertAssetButton;\n  }\n\n  /**\n   * Create a custom summernote button that inserts a WISE link into\n   * summernote\n   * @param controller the controller that is creating the WISE link\n   * e.g. openResponseController\n   * @param nodeId the node id of the component that is creating the WISE link\n   * @param componentId the component id of the component that is creating the WISE link\n   * @param target the target element in the component to insert the WISE link into\n   * e.g. 'prompt' or 'rubricSummernoteId'\n   * @param tooltip the tooltip text for the custom button\n   * @return custom summernote button\n   */\n  createInsertWISELinkButton(controller, projectId, nodeId, componentId, target, tooltip) {\n    const thisRootScope = this.$rootScope;\n\n    const InsertWISELinkButton = function(context) {\n      const ui = $.summernote.ui;\n\n      const button = ui.button({\n        contents: '<i class=\"note-icon-link\"></i>',\n        tooltip: tooltip,\n        click: function () {\n          // remember the position of the cursor\n          context.invoke('editor.saveRange');\n\n          // create the params for opening the WISE Link chooser\n          const params = {};\n\n          if (projectId != null) {\n            params.projectId = projectId;\n          }\n\n          if (nodeId != null) {\n            params.nodeId = nodeId;\n          }\n\n          if (componentId != null) {\n            params.componentId = componentId;\n          }\n\n          params.target = target;\n\n          // display the WISE Link authoring popup\n          thisRootScope.$broadcast('openWISELinkChooser', params);\n        }\n      });\n      return button.render();   // return button as jquery object\n    };\n    return InsertWISELinkButton;\n  }\n\n  /**\n   * Remove html tags from the string. Also remove new lines.\n   * @param html an html string\n   * @return text without html tags\n   */\n  removeHTMLTags(html) {\n    let text = '';\n    if (html != null) {\n      // remove tags\n      text = html.replace(/<\\/?[^>]+(>|$)/g, \" \");\n      text = text.replace(/\\n/g, \" \");\n      text = text.replace(/\\r/g, \" \");\n    }\n    return text;\n  }\n\n  /**\n   * Check if a string ends with a specific string\n   * @param subjectString the main string\n   * @param searchString the potential end of the string\n   * @param position (optional) the position to start searching\n   * @return whether the subjectString ends with the searchString\n   */\n  endsWith(subjectString, searchString, position) {\n    if (typeof position !== 'number' || !isFinite(position) || Math.floor(position) !== position || position > subjectString.length) {\n      position = subjectString.length;\n    }\n    position -= searchString.length;\n    const lastIndex = subjectString.lastIndexOf(searchString, position);\n    return lastIndex !== -1 && lastIndex === position;\n  }\n\n  /**\n   * Sort the objects by server save time\n   * @param object1 an object\n   * @param object2 an object\n   * @return -1 if object1 server save time comes before object2 server save time\n   * 1 if object1 server save time comes after object2 server save time\n   * 0 if object1 server save time is equal to object2 server save time\n   */\n  sortByServerSaveTime(object1, object2) {\n    if (object1.serverSaveTime < object2.serverSaveTime) {\n      return -1;\n    } else if (object1.serverSaveTime > object2.serverSaveTime) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n  /**\n   * Convert milliseconds since the epoch to a pretty printed date time\n   * @param milliseconds the milliseconds since the epoch\n   * @return a string containing the pretty printed date time\n   * example\n   * Wed Apr 06 2016 9:05:38 AM\n   */\n  convertMillisecondsToFormattedDateTime(milliseconds) {\n    const date = new Date(milliseconds);\n    if (date != null) {\n      return date.toDateString() + \" \" + date.toLocaleTimeString();\n    }\n    return \"\";\n  }\n\n  /**\n   * Get the label for the given component type\n   * @param componentType string\n   * @return string label for the component type\n   */\n  getComponentTypeLabel(componentType) {\n    /*\n     * check if we have already obtained the label for this component type\n     * before\n     */\n    let label = this.componentTypeToLabel[componentType];\n\n    if (label == null) {\n      let componentService = this.$injector.get(componentType + 'Service');\n      if (componentService != null && componentService.getComponentTypeLabel != null) {\n        label = componentService.getComponentTypeLabel();\n        this.componentTypeToLabel[componentType] = label;\n      }\n    }\n\n    if (label == null) {\n      /*\n       * we were unable to find the label so we will just use the\n       * component type as the label\n       */\n      label = componentType;\n    }\n    return label;\n  }\n\n  /**\n   * Check if two arrays contain the same values. This is commonly used to\n   * check if two arrays of ids contain the same values. The order of the\n   * elements is not compared, only the actual values. This means the elements\n   * can be in different orders but still contain the same values.\n   * Example:\n   * array1=['1234567890', 'abcdefghij']\n   * array2=['abcdefghij', '1234567890']\n   * If these two arrays are passed in as the two arguments, this function\n   * will return true.\n   * Note: This may only work if the elements are strings, numbers or\n   * booleans. If the elements are objects, this function may or may not work.\n   * @param array1 an array of strings, numbers, or booleans\n   * @param array2 an array of strings, numbers, or booleans\n   * @return whether the arrays contain the same values\n   */\n  arraysContainSameValues(array1, array2) {\n    if (array1 != null && array2 != null) {\n      const array1Copy = this.makeCopyOfJSONObject(array1);\n      array1Copy.sort();\n\n      const array2Copy = this.makeCopyOfJSONObject(array2);\n      array2Copy.sort();\n\n      if (angular.toJson(array1Copy) == angular.toJson(array2Copy)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Whether there are any connected components\n   * @param componentContent the component content\n   * @return whether there are any connected components\n   */\n  hasConnectedComponent(componentContent) {\n    if (componentContent != null) {\n      const connectedComponents = componentContent.connectedComponents;\n      if (connectedComponents != null && connectedComponents.length > 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Whether this component shows work from a connected component\n   * @param componentContent the component content\n   * @return whether this component shows work from a connected component\n   */\n  hasShowWorkConnectedComponent(componentContent) {\n    if (componentContent != null) {\n      const connectedComponents = componentContent.connectedComponents;\n      if (connectedComponents != null) {\n        for (let connectedComponent of connectedComponents) {\n          if (connectedComponent != null) {\n            if (connectedComponent.type == 'showWork') {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Whether this component imports work from a connected component\n   * @param componentContent the component content\n   * @return whether this component imports work from a connected component\n   */\n  hasImportWorkConnectedComponent(componentContent) {\n    if (componentContent != null) {\n      const connectedComponents = componentContent.connectedComponents;\n      if (connectedComponents != null) {\n        for (let connectedComponent of connectedComponents) {\n          if (connectedComponent != null) {\n            if (connectedComponent.type == 'importWork') {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if an array has any non null elements.\n   * @param arrayToCheck An array which may have null and non null elements.\n   * @return True if the array has at least one non null element.\n   * False if the array has all null elements.\n   */\n  arrayHasNonNullElement(arrayToCheck) {\n    if (arrayToCheck != null) {\n      for (let element of arrayToCheck) {\n        if (element != null) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Takes a string and breaks it up into multiple lines so that the length of\n   * each line does not exceed a certain number of characters. This code was\n   * found on stackoverflow.\n   * https://stackoverflow.com/questions/14484787/wrap-text-in-javascript\n   * @param str The string to break up.\n   * @param maxWidth The max width of a line.\n   * @return A string that has been broken up into multiple lines using \\n.\n   */\n  wordWrap(str, maxWidth) {\n    if (str.length <= maxWidth) {\n      return str;\n    }\n    let newLineStr = \"\\n\";\n    let done = false;\n    let res = '';\n    do {\n        let found = false;\n        // Inserts new line at first whitespace of the line\n        for (let i = maxWidth - 1; i >= 0; i--) {\n            if (this.testWhite(str.charAt(i))) {\n                res = res + [str.slice(0, i), newLineStr].join('');\n                str = str.slice(i + 1);\n                found = true;\n                break;\n            }\n        }\n        // Inserts new line at maxWidth position, the word is too long to wrap\n        if (!found) {\n            res += [str.slice(0, maxWidth), newLineStr].join('');\n            str = str.slice(maxWidth);\n        }\n\n        if (str.length < maxWidth)\n            done = true;\n    } while (!done);\n\n    return res + str;\n  }\n\n  /**\n   * Helper function for wordWrap().\n   * @param x A single character string.\n   * @return Whether the single character is a whitespace character.\n   */\n  testWhite(x) {\n    let white = new RegExp(/^\\s$/);\n    return white.test(x.charAt(0));\n  };\n\n  /**\n   * Get the number of words in the string.\n   * @param str The string.\n   * @return The number of words in the string.\n   */\n  wordCount(str) {\n    return str.trim().split(/\\s+/).length;\n  }\n\n  /**\n   * Check if there is a 'nodeEntered' event in the array of events.\n   * @param events An array of events.\n   * @return Whether there is a 'nodeEntered' event in the array of events.\n   */\n  hasNodeEnteredEvent(events) {\n    for (let event of events) {\n      if (event.event == 'nodeEntered') {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Determine whether the component has been authored to import work.\n   * @param componentContent The component content.\n   * @return Whether to import work in this component.\n   */\n  hasImportWorkConnectedComponent(componentContent) {\n    return this.hasXConnectedComponent(componentContent, 'importWork');\n  }\n\n  /**\n   * Determine whether the component has been authored to show work.\n   * @param componentContent The component content.\n   * @return Whether to show work in this component.\n   */\n  hasShowWorkConnectedComponent(componentContent) {\n    return this.hasXConnectedComponent(componentContent, 'showWork');\n  }\n\n  /**\n   * Determine whether the component has been authored to show classmate work.\n   * @param componentContent The component content.\n   * @return Whether to show classmate work in this component.\n   */\n  hasShowClassmateWorkConnectedComponent(componentContent) {\n    return this.hasXConnectedComponent(componentContent, 'showClassmateWork');\n  }\n\n  /**\n   * Determine whether the component has a connected component of the given type.\n   * @param componentContent The component content.\n   * @param connectedComponentType The connected component type.\n   * @return Whether the component has a connected component of the given type.\n   */\n  hasXConnectedComponent(componentContent, connectedComponentType) {\n    if (componentContent.connectedComponents != null) {\n      let connectedComponents = componentContent.connectedComponents;\n      // loop through all the connected components\n      for (let connectedComponent of connectedComponents) {\n        if (connectedComponent.type == connectedComponentType) {\n          // the connected component is the type we're looking for\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Temporarily highlight an element in the DOM.\n   * @param id The id of the element.\n   * @param duration The number of milliseconds to keep the element highlighted.\n   */\n  temporarilyHighlightElement(id, duration = 1000) {\n    let element = $('#' + id);\n    let originalBackgroundColor = element.css('backgroundColor');\n    element.css('background-color', '#FFFF9C');\n\n    /*\n     * Use a timeout before starting to transition back to\n     * the original background color. For some reason the\n     * element won't get highlighted in the first place\n     * unless this timeout is used.\n     */\n    this.$timeout(() => {\n      // slowly fade back to the original background color\n      element.css({\n        'transition': 'background-color 2s ease-in-out',\n        'background-color': originalBackgroundColor\n      });\n\n      /*\n       * remove these styling fields after we perform\n       * the fade otherwise the regular mouseover\n       * background color change will not work\n       */\n      this.$timeout(() => {\n        element.css({\n          'transition': '',\n          'background-color': ''\n        });\n      }, 2000);\n    }, duration);\n  }\n}\n\n// Get the last element of the array\nif (!Array.prototype.last) {\n  Array.prototype.last = function() {\n    return this[this.length - 1];\n  };\n}\n\nUtilService.$inject = [\n  '$filter',\n  '$injector',\n  '$rootScope',\n  '$timeout'\n];\n\nexport default UtilService;\n"]}