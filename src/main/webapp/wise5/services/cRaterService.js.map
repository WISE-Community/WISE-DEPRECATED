{"version":3,"sources":["cRaterService.es6"],"names":["CRaterService","$http","ConfigService","cRaterItemType","cRaterItemId","cRaterRequestType","cRaterResponseId","studentData","httpParams","method","url","getCRaterRequestURL","params","itemId","responseId","wiseRunMode","then","response","Date","getTime","makeCRaterRequest","component","cRater","itemType","enableCRater","hasOwnProperty","scoreOn","getCRaterItemType","getCRaterItemId","getCRaterScoreOn","score","scoringRules","tempScoringRule","scoringRule","getCRaterScoringRuleByScore","feedbackText","previousScore","currentScore","getMultipleAttemptCRaterScoringRuleByScore","multipleAttemptScoringRules","multipleAttemptScoringRule","scoreSequence","previousScoreMatch","currentScoreMatch","toString","match","isCRaterVerifyResponseValid","data","regEx","result","exec","$inject"],"mappings":"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","file":"cRaterService.js","sourcesContent":["class CRaterService {\n  constructor($http, ConfigService) {\n    this.$http = $http;\n    this.ConfigService = ConfigService;\n  }\n\n  /**\n   * Make a CRater request to score student data\n   * @param cRaterItemType the CRater item type e.g. 'HENRY'\n   * @param cRaterRequestType the CRater request type 'scoring' or 'verify'\n   * @param cRaterResponseId a randomly generated id used to keep track\n   * of the request\n   * @param studentData the student data\n   * @returns a promise that returns the result of the CRater request\n   */\n  makeCRaterRequest(cRaterItemType, cRaterItemId, cRaterRequestType,\n      cRaterResponseId, studentData) {\n    const httpParams = {};\n    httpParams.method = 'GET';\n    httpParams.url = this.ConfigService.getCRaterRequestURL();\n    httpParams.params = {\n      cRaterItemType: cRaterItemType,\n      itemId: cRaterItemId,\n      cRaterRequestType: cRaterRequestType,\n      responseId: cRaterResponseId,\n      studentData: studentData,\n      wiseRunMode: 'preview'\n    };\n\n    // make the CRater request\n    return this.$http(httpParams).then((response) => {\n      return response;\n    });\n  }\n\n  /**\n   * Make a CRater request to score student data\n   * @param cRaterItemType the CRater item type e.g. 'HENRY'\n   * @param cRaterResponseId a randomly generated id used to keep track\n   * of the request\n   * @param studentData the student data\n   * @returns a promise that returns the result of the CRater request\n   */\n  makeCRaterScoringRequest(cRaterItemType, cRaterItemId, studentData) {\n    const cRaterRequestType = 'scoring';\n    const cRaterResponseId = new Date().getTime();\n    return this.makeCRaterRequest(cRaterItemType,\n      cRaterItemId,\n      cRaterRequestType,\n      cRaterResponseId,\n      studentData);\n  }\n\n  /**\n   * Make a CRater request to verifythe item type and item id\n   * @param cRaterItemType the CRater item type e.g. 'HENRY'\n   * @param cRaterResponseId a randomly generated id used to keep track\n   * of the request\n   * @param studentData the student data\n   * @returns a promise that returns the result of the CRater request\n   */\n  makeCRaterVerifyRequest(cRaterItemType, cRaterItemId, studentData) {\n    const cRaterRequestType = 'verify';\n    const cRaterResponseId = new Date().getTime();\n    return this.makeCRaterRequest(cRaterItemType, cRaterItemId,\n        cRaterRequestType, cRaterResponseId, studentData);\n  }\n\n  /**\n   * Get the CRater item type from the component\n   * @param component the component content\n   */\n  getCRaterItemType(component) {\n    if (component != null && component.cRater != null) {\n      return component.cRater.itemType;\n    }\n    return null;\n  }\n\n  /**\n   * Get the CRater item id from the component\n   * @param component the component content\n   */\n  getCRaterItemId(component) {\n    if (component != null && component.cRater != null) {\n      return component.cRater.itemId;\n    }\n    return null;\n  }\n\n  /**\n   * Find when we should perform the CRater scoring\n   * @param component the component content\n   * @returns when to perform the CRater scoring e.g. 'submit', 'save', 'change', 'exit'\n   */\n  getCRaterScoreOn(component) {\n    if (component != null) {\n      /*\n       * CRater can be enabled in two ways\n       * 1. the enableCRater field is true\n       * 2. there is no enableCRater field but there is a cRater object (this is for legacy purposes)\n       */\n      if ((component.enableCRater && component.cRater != null) ||\n        (!component.hasOwnProperty('enableCRater') && component.cRater != null)) {\n\n        // get the score on value e.g. 'submit', 'save', 'change', or 'exit'\n        return component.cRater.scoreOn;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Check if CRater is enabled for this component\n   * @param component the component content\n   */\n  isCRaterEnabled(component) {\n    if (component != null) {\n      // get the item type and item id\n      const cRaterItemType = this.getCRaterItemType(component);\n      const cRaterItemId = this.getCRaterItemId(component);\n      if (cRaterItemType != null && cRaterItemId != null) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if the CRater is set to score on save\n   * @param component the component content\n   * @returns whether the CRater is set to score on save\n   */\n  isCRaterScoreOnSave(component) {\n    if (component != null) {\n      // find when we should perform the CRater scoring\n      const scoreOn = this.getCRaterScoreOn(component);\n      if (scoreOn != null && scoreOn === 'save') {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if the CRater is set to score on submit\n   * @param component the component content\n   * @returns whether the CRater is set to score on submit\n   */\n  isCRaterScoreOnSubmit(component) {\n    if (component != null) {\n      // find when we should perform the CRater scoring\n      const scoreOn = this.getCRaterScoreOn(component);\n      if (scoreOn != null && scoreOn === 'submit') {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if the CRater is set to score on change\n   * @param component the component content\n   * @returns whether the CRater is set to score on change\n   */\n  isCRaterScoreOnChange(component) {\n    if (component != null) {\n      // find when we should perform the CRater scoring\n      const scoreOn = this.getCRaterScoreOn(component);\n      if (scoreOn != null && scoreOn === 'change') {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Check if the CRater is set to score on exit\n   * @param component the component content\n   * @returns whether the CRater is set to score on exit\n   */\n  isCRaterScoreOnExit(component) {\n    if (component != null) {\n      // find when we should perform the CRater scoring\n      const scoreOn = this.getCRaterScoreOn(component);\n      if (scoreOn != null && scoreOn === 'exit') {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Get the CRater scoring rule by score\n   * @param component the component content\n   * @param score the score\n   * @returns the scoring rule for the given score\n   */\n  getCRaterScoringRuleByScore(component, score) {\n    if (component != null && score != null) {\n      const cRater = component.cRater;\n      if (cRater != null) {\n        const scoringRules = cRater.scoringRules;\n        if (scoringRules != null) {\n          // loop through all the scoring rules\n          for (let tempScoringRule of scoringRules) {\n            if (tempScoringRule != null) {\n              if (tempScoringRule.score == score) {\n                /*\n                 * the score matches so we have found\n                 * the scoring rule that we want\n                 */\n                return tempScoringRule;\n              }\n            }\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Get the feedback text for the given score\n   * @param component the component content\n   * @param score the score we want feedback for\n   * @returns the feedback text for the given score\n   */\n  getCRaterFeedbackTextByScore(component, score) {\n    const scoringRule = this.getCRaterScoringRuleByScore(component, score);\n    if (scoringRule != null) {\n      return scoringRule.feedbackText;\n    }\n    return null;\n  }\n\n  /**\n   * Get the feedback text for the given previous score and current score\n   * @param component the component content\n   * @param previousScore the score from the last submit\n   * @param currentScore the score from the current submit\n   * @returns the feedback text for the given previous score and current score\n   */\n  getMultipleAttemptCRaterFeedbackTextByScore(component, previousScore,\n      currentScore) {\n    const scoringRule = this.getMultipleAttemptCRaterScoringRuleByScore(\n        component, previousScore, currentScore);\n    if (scoringRule != null) {\n      return scoringRule.feedbackText;\n    }\n    return null;\n  }\n\n  /**\n   * Get the multiple attempt CRater scoring rule by previous score and\n   * current score\n   * @param component the component content\n   * @param previousScore the score from the last submit\n   * @param currentScore the score from the current submit\n   * @returns the scoring rule for the given previous score and current score\n   */\n  getMultipleAttemptCRaterScoringRuleByScore(component, previousScore,\n      currentScore) {\n    if (component != null && previousScore != null && currentScore != null) {\n      const cRater = component.cRater;\n      if (cRater != null) {\n        const multipleAttemptScoringRules = cRater.multipleAttemptScoringRules;\n        if (multipleAttemptScoringRules != null) {\n          for (let multipleAttemptScoringRule of multipleAttemptScoringRules) {\n            if (multipleAttemptScoringRule != null) {\n              const scoreSequence = multipleAttemptScoringRule.scoreSequence;\n              if (scoreSequence != null) {\n                /*\n                 * get the expected previous score and current score\n                 * that will satisfy the rule\n                 */\n                const previousScoreMatch = scoreSequence[0];\n                const currentScoreMatch = scoreSequence[1];\n\n                if (previousScore.toString().match(\"[\" + previousScoreMatch + \"]\") &&\n                  currentScore.toString().match(\"[\" + currentScoreMatch + \"]\")) {\n\n                  /*\n                   * the previous score and current score match the\n                   * expected scores so we have found the rule we want\n                   */\n                  return multipleAttemptScoringRule;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Check if the item id is a valid CRater item id.\n   * @param itemId A string.\n   * @return A promise that returns whether the item id is valid.\n   */\n  verifyCRaterItemId(itemId) {\n    const httpParams = {};\n    httpParams.method = 'GET';\n    httpParams.url = this.ConfigService.getCRaterRequestURL();\n    httpParams.params = {\n      cRaterItemType: 'CRATER',\n      itemId: itemId,\n      cRaterRequestType: 'verify'\n    };\n    return this.$http(httpParams).then((response) => {\n      return this.isCRaterVerifyResponseValid(response.data);\n    });\n  }\n\n  /**\n   * Parse the response to determine if the item id is valid.\n   * @param response A response string from a CRater verify request.\n   * @returns {boolean} Whether the item id is valid.\n   */\n  isCRaterVerifyResponseValid(response) {\n    /*\n     * Create the regex to match the part of the response that specifies whether\n     * the item id is valid or not.\n     *\n     * Example valid item id\n     * <item id=\"Chloroplast\" avail=\"Y\">\n     *\n     * Example invalid item id\n     * <item id=\"Chloroplast\" avail=\"N\">\n     */\n    let regEx = /item id=\".*?\" avail=\"(\\w)\"/;\n    let result = regEx.exec(response);\n    if (result[1] == 'Y') {\n      return true;\n    }\n    return false;\n  }\n}\n\nCRaterService.$inject = [\n  '$http',\n  'ConfigService'\n];\n\nexport default CRaterService;\n"]}